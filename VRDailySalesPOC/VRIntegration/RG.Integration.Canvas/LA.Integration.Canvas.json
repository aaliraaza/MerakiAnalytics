{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "LA_API_Version": {
      "type": "string"
    },
    "serviceBusConnectionString": {
      "type": "string"
    },
    "serviceBusConnectionStringdisplayName": {
      "type": "string"
    },
   

    "LA_CreateUser_Name": {
      "type": "string"
    },
    "LA_EditUser_Name": {
      "type": "string"
    },
    "LA_CreateTerm_Name": {
      "type": "string"
    },
    "LA_EditTerm_Name": {
      "type": "string"
    },
    "LA_CreateCourse_Name": {
      "type": "string"
    },
    "LA_EditCourse_Name": {
      "type": "string"
    },
    "LA_CreateGroup_Name": {
      "type": "string"
    },
    "LA_CreateStaff_Name": {
      "type": "string"
    },
    "LA_DeleteCourse_Name": {
      "type": "string"
    },
    "LA_DeleteCourseEnrollment_Name": {
      "type": "string"
    },
    "LA_DeleteGroupMembership_Name": {
      "type": "string"
    },
    "LA_EditCourseEnrollment_Name": {
      "type": "string"
    },
    "LA_EditCourseEnrollmentHelper_Name": {
      "type": "string"
    },
    "LA_EnrollUserCourse_Name": {
      "type": "string"
    },
    "LA_StaffInformation_Publish_Name": {
      "type": "string"
    },
    "LA_StudentInformation_Publish_Name": {
      "type": "string"
    },
    "LA_Logging_StudentPublisher_Name": {
      "type": "string"
    },
    "LA_Logging_CanvasSubscriber_Name": {
      "type": "string"
    },
    "integrationAccountRGName": {
      "type": "string"
    },
    "integrationAccountName": {
      "type": "string"
    },
    "SQL_Server_Name": {
      "type": "string"
    },
    "SQL_Database_Name": {
      "type": "string"
    },
    "SQL_Username": {
      "type": "securestring"
    },
    "SQL_Password": {
      "type": "securestring"
    },

    "functionsRGName": {
      "type": "string"
    },
    "functionsContainerAppName": {
      "type": "string"
    },

    "apimRGName": {
      "type": "string"
    },
    "apimInstanceName": {
      "type": "string"
    },
    "apim_service_canvas": {
      "type": "string"
    },
    "apim_service_logging": {
      "type": "string"
    },
    "apim_service_canvas_subscriptionkey": {
      "type": "string"
    },
    "apim_service_logging_subscriptionkey": {
      "type": "string"
    },

    "logicAppLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "allowedValues": [
        "[resourceGroup().location]",
        "australiaeast",
        "australiasoutheast",
        "brazilsouth",
        "centralus",
        "eastasia",
        "eastus",
        "eastus2",
        "japaneast",
        "japanwest",
        "northcentralus",
        "northeurope",
        "southcentralus",
        "southeastasia",
        "westeurope",
        "westus"
      ],
      "metadata": {
        "description": "Location of the Logic App."
      }
    }
  },
  "variables": {
    "serviceBusConnectionName": "KU_Integration_ServiceBusConnection_Prod",
    "sqlConnectionName": "LoggingServiceSQLConnectionProd"
  },
  "resources": [
    //{
    //  "type": "Microsoft.Web/connections",
    //  "apiVersion": "2015-08-01-preview",
    //  "location": "[resourceGroup().location]",
    //  "name": "[variables('serviceBusConnectionName')]",
    //  "properties": {
    //    "api": {
    //      "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/servicebus')]"
    //    },
    //    "displayName": "apiconn_kuintegration_servicebus_ci",
    //    "parameterValues": {
    //      "connectionString": "[parameters('serviceBusConnectionString')]"
    //    }
    //  }
    //},
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2015-08-01-preview",
      "location": "[resourceGroup().location]",
      "name": "[variables('serviceBusConnectionName')]",
      "tags": {
        "displayName": "apiconnectionservicebus"
      },
      "properties": {
        "api": {
          "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/servicebus')]"
        },
        "displayName": "[parameters('serviceBusConnectionStringdisplayName')]",
        "parameterValues": {
          "connectionString": "[parameters('serviceBusConnectionString')]"
        }
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2015-08-01-preview",
      "location": "[resourceGroup().location]",
      "name": "[variables('sqlConnectionName')]",
      "properties": {
        "api": {
          "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/sql')]"
        },
        "displayName": "[parameters('SQL_Server_Name')]",
        "parameterValues": {
          "server": "[parameters('SQL_Server_Name')]",
          "database": "[parameters('SQL_Database_Name')]",
          "username": "[parameters('SQL_Username')]",
          "password": "[parameters('SQL_Password')]"

        }
      }
    },
    {
      "comments": "Generalized from resource: '/subscriptions/59917f2a-0c8e-4062-a7eb-13897b2d7cdd/resourceGroups/RG-Kingston-POC/providers/Microsoft.Logic/workflows/LA.CreateUser.Canvas'.",
      "type": "Microsoft.Logic/workflows",
      "name": "[parameters('LA_CreateUser_Name')]",
      "apiVersion": "2016-06-01",
      "location": "westeurope",
      "tags": {
        "displayName": "LA.CreateUser.Canvas"
      },
      "properties": {
        "state": "Enabled",
        "integrationAccount": {
          "id": "[concat(subscription().id, '/resourceGroups/', parameters('integrationAccountRGName'), '/providers/Microsoft.Logic/integrationAccounts/', parameters('integrationAccountName'))]"
        },
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": { },
              "type": "Object"
            }
          },
          "triggers": {
            "When_a_message_is_received_in_a_topic_subscription_(auto-complete)": {
              "recurrence": {
                "frequency": "Minute",
                "interval": 1
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "api": {
                    "runtimeUrl": "https://logic-apis-westeurope.azure-apim.net/apim/servicebus"
                  },
                  "connection": {
                    "name": "@parameters('$connections')['servicebus1']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/@{encodeURIComponent('CreateUser')}/subscriptions/@{encodeURIComponent('CreateUserSubscription')}/messages/head",
                "queries": {
                  "subscriptionType": "Main"
                }
              }
            }
          },
          "actions": {
            "Filter_Result": {
              "runAfter": {
                "Scope": [
                  "Failed"
                ]
              },
              "type": "Query",
              "inputs": {
                "from": "@result('Scope')",
                "where": "@equals(item()['status'], 'Failed')"
              }
            },
            "For_each": {
              "foreach": "@body('Filter_Result')",
              "actions": {
                "Log_Failures": {
                  "runAfter": { },
                  "type": "ApiManagement",
                  "inputs": {
                    "api": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_logging'))]"
                    },
                    "body": "@item()?['outputs']?['body']",
                    "headers": {
                      "correlationId": "@item()['clientTrackingId']",
                      "failedActionName": "@item()['name']",
                      "loggingStatus": "@item()['status']",
                      "sis_course_id": "",
                      "sis_student_id": "@{json(decodeBase64(triggerBody()['ContentData']))['User']['StudentCourseEnrolments']['StudentCourseEnrolment']['Users']['User']['InstitutionEmailAddress']}",
                      "sis_term_id": ""
                    },
                    "method": "post",
                    "pathTemplate": {
                      "parameters": {
                        "status": "@item()['status']"
                      },
                      "template": "/api/logging/logsubscribermessage/{status}"
                    },
                    "subscriptionKey": "[parameters('apim_service_logging_subscriptionkey')]"
                  }
                }
              },
              "runAfter": {
                "Filter_Result": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "Log_Subscriber_Message": {
              "runAfter": { },
              "type": "ApiManagement",
              "inputs": {
                "api": {
                  "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_logging'))]"
                },
                "body": "@{decodeBase64(triggerBody()['ContentData'])}",
                "headers": {
                  "correlationId": "@triggerOutputs()['headers']?['X-Ms-Client-Tracking-Id']",
                  "failedActionName": "",
                  "loggingStatus": "Success",
                  "sis_course_id": "",
                  "sis_student_id": "@{json(decodeBase64(triggerBody()['ContentData']))['User']['StudentCourseEnrolments']['StudentCourseEnrolment']['Users']['User']['InstitutionEmailAddress']}",
                  "sis_term_id": ""
                },
                "method": "post",
                "pathTemplate": {
                  "parameters": {
                    "status": "@{encodeURIComponent('Success')}"
                  },
                  "template": "/api/logging/logsubscribermessage/{status}"
                },
                "subscriptionKey": "[parameters('apim_service_logging_subscriptionkey')]"
              }
            },
            "Scope": {
              "actions": {
                "ConvertJsonToXml": {
                  "runAfter": { },
                  "type": "Function",
                  "inputs": {
                    "body": "@{decodeBase64(triggerBody()['ContentData'])}",
                    "function": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/ConvertJsonToXml')]"
                    },
                    "headers": {
                      "Content-Type": "application/json"
                    }
                  }
                },
                "Create_User": {
                  "runAfter": {
                    "FormatJsonPayloadOmitRoot": [
                      "Succeeded"
                    ]
                  },
                  "type": "ApiManagement",
                  "inputs": {
                    "api": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                    },
                    "body": "@body('FormatJsonPayloadOmitRoot')",
                    "headers": {
                      "Content-Type": "application/json"
                    },
                    "method": "post",
                    "pathTemplate": {
                      "parameters": { },
                      "template": "/VLE/Canvas/api/v1/accounts/1/users"
                    },
                    "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                  }
                },
                "FormatJsonPayloadOmitRoot": {
                  "runAfter": {
                    "Transform_XML": [
                      "Succeeded"
                    ]
                  },
                  "type": "Function",
                  "inputs": {
                    "body": "@{json(body('Transform_XML'))}",
                    "function": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/FormatJsonPayloadOmitRoot')]"
                    },
                    "headers": {
                      "Content-Type": "application/json"
                    }
                  }
                },
                "Transform_XML": {
                  "runAfter": {
                    "ConvertJsonToXml": [
                      "Succeeded"
                    ]
                  },
                  "type": "Xslt",
                  "inputs": {
                    "content": "@{body('ConvertJsonToXml')}",
                    "function": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/TransformContainer')]"
                    },
                    "integrationAccount": {
                      "map": {
                        "name": "Canonical.UserToCanvas.CreateUser"
                      }
                    }
                  }
                }
              },
              "runAfter": { },
              "type": "Scope"
            }
          },
          "outputs": { }
        },
        "parameters": {
          "$connections": {
            "value": {
              "servicebus1": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/servicebus')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('serviceBusConnectionName'))]"
              }
            }
          }
        }
      },
      "resources": [ ],
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('serviceBusConnectionName'))]"
      ]
    },
    {
      "comments": "Generalized from resource: '/subscriptions/59917f2a-0c8e-4062-a7eb-13897b2d7cdd/resourceGroups/RG-Kingston-POC/providers/Microsoft.Logic/workflows/LA.EditUser.Canvas'.",
      "type": "Microsoft.Logic/workflows",
      "name": "[parameters('LA_EditUser_Name')]",
      "apiVersion": "2016-06-01",
      "location": "westeurope",
      "tags": {
        "displayName": "LA.EditUser.Canvas"
      },
      "properties": {
        "state": "Enabled",
        "integrationAccount": {
          "id": "[concat(subscription().id, '/resourceGroups/', parameters('integrationAccountRGName'), '/providers/Microsoft.Logic/integrationAccounts/', parameters('integrationAccountName'))]"
        },
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": { },
              "type": "Object"
            }
          },
          "triggers": {
            "When_a_message_is_received_in_a_topic_subscription_(auto-complete)": {
              "recurrence": {
                "frequency": "Minute",
                "interval": 1
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "api": {
                    "runtimeUrl": "https://logic-apis-westeurope.azure-apim.net/apim/servicebus"
                  },
                  "connection": {
                    "name": "@parameters('$connections')['servicebus1']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/@{encodeURIComponent('EditUser')}/subscriptions/@{encodeURIComponent('EditUserSubscription')}/messages/head",
                "queries": {
                  "subscriptionType": "Main"
                }
              }
            }
          },
          "actions": {
            "Filter_Result": {
              "runAfter": {
                "Scope": [
                  "Failed"
                ]
              },
              "type": "Query",
              "inputs": {
                "from": "@result('Scope')",
                "where": "@equals(item()['status'], 'Failed')"
              }
            },
            "For_each": {
              "foreach": "@body('Filter_Result')",
              "actions": {
                "Log_Failures": {
                  "runAfter": { },
                  "type": "ApiManagement",
                  "inputs": {
                    "api": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_logging'))]"
                    },
                     "body": "@item()?['outputs']?['body']",
                    "headers": {
                      "correlationId": "@item()['clientTrackingId']",
                      "failedActionName": "@item()['name']",
                      "loggingStatus": "@item()['status']",
                      "sis_course_id": "",
                      "sis_student_id": "@{json(decodeBase64(triggerBody()['ContentData']))['User']['StudentCourseEnrolments']['StudentCourseEnrolment']['Users']['User']['InstitutionEmailAddress']}",
                      "sis_term_id": ""
                    },
                    "method": "post",
                    "pathTemplate": {
                      "parameters": {
                        "status": "@item()['status']"
                      },
                      "template": "/api/logging/logsubscribermessage/{status}"
                    },
                    "subscriptionKey": "[parameters('apim_service_logging_subscriptionkey')]"
                  }
                }
              },
              "runAfter": {
                "Filter_Result": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "Log_Subscriber_Message": {
              "runAfter": { },
              "type": "ApiManagement",
              "inputs": {
                "api": {
                  "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_logging'))]"
                },
                "body": "@{decodeBase64(triggerBody()['ContentData'])}",
                "headers": {
                  "correlationId": "@triggerOutputs()['headers']?['X-Ms-Client-Tracking-Id']",
                  "failedActionName": "",
                  "loggingStatus": "Success",
                  "sis_course_id": "",
                  "sis_student_id": "@{json(decodeBase64(triggerBody()['ContentData']))['User']['StudentCourseEnrolments']['StudentCourseEnrolment']['Users']['User']['InstitutionEmailAddress']}",
                  "sis_term_id": ""
                },
                "method": "post",
                "pathTemplate": {
                  "parameters": {
                    "status": "@{encodeURIComponent('Success')}"
                  },
                  "template": "/api/logging/logsubscribermessage/{status}"
                },
                "subscriptionKey": "[parameters('apim_service_logging_subscriptionkey')]"
              }
            },
            "Scope": {
              "actions": {
                "ConvertJsonToXml": {
                  "runAfter": { },
                  "type": "Function",
                  "inputs": {
                    "body": "@{decodeBase64(triggerBody()['ContentData'])}",
                    "function": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/ConvertJsonToXml')]"
                    },
                    "headers": {
                      "Content-Type": "application/json"
                    }
                  }
                },
                "Edit_User": {
                  "runAfter": {
                    "Until_Search_User": [
                      "Succeeded"
                    ]
                  },
                  "type": "ApiManagement",
                  "inputs": {
                    "api": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                    },
                    "body": "@body('FormatJsonPayloadOmitRoot')",
                    "headers": {
                      "Content-Type": "application/json"
                    },
                    "method": "put",
                    "pathTemplate": {
                      "parameters": {
                        "id": "@{encodeURIComponent(body('Search_User')[0]['id'])}"
                      },
                      "template": "/VLE/Canvas/api/v1/users/{id}"
                    },
                    "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                  }
                },
                "FormatJsonPayloadOmitRoot": {
                  "runAfter": {
                    "Transform_XML": [
                      "Succeeded"
                    ]
                  },
                  "type": "Function",
                  "inputs": {
                    "body": "@{json(body('Transform_XML'))}",
                    "function": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/FormatJsonPayloadOmitRoot')]"
                    },
                    "headers": {
                      "Content-Type": "application/json"
                    }
                  }
                },
                "Transform_XML": {
                  "runAfter": {
                    "ConvertJsonToXml": [
                      "Succeeded"
                    ]
                  },
                  "type": "Xslt",
                  "inputs": {
                    "content": "@{body('ConvertJsonToXml')}",
                    "function": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/TransformContainer')]"
                    },
                    "integrationAccount": {
                      "map": {
                        "name": "Canonical.UserToCanvas.EditUser"
                      }
                    }
                  }
                },
                "Until_Search_User": {
                  "actions": {
                    "Search_User": {
                      "runAfter": { },
                      "type": "ApiManagement",
                      "inputs": {
                        "api": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_logging'))]"
                        },
                        "method": "get",
                        "pathTemplate": {
                          "parameters": { },
                          "template": "/VLE/Canvas/api/v1/accounts/1/users"
                        },
                        "queries": {
                          "search_term": "@{body('FormatJsonPayloadOmitRoot')['user']['email']}"
                        },
                        "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                      }
                    }
                  },
                  "runAfter": {
                    "FormatJsonPayloadOmitRoot": [
                      "Succeeded"
                    ]
                  },
                  "expression": "@and(equals(actions('Search_User')?['status'], 'Succeeded'),\n\tnot(empty(coalesce(outputs('Search_User')['body'], ''))))",
                  "limit": {
                    "count": 3,
                    "timeout": "PT1H"
                  },
                  "type": "Until"
                }
              },
              "runAfter": { },
              "type": "Scope"
            }
          },
          "outputs": { }
        },
        "parameters": {
          "$connections": {
            "value": {
              "servicebus1": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/servicebus')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('serviceBusConnectionName'))]"
              }
            }
          }
        }
      },
      "resources": [ ],
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('serviceBusConnectionName'))]"
      ]
    },
    {
      "comments": "Generalized from resource: '/subscriptions/59917f2a-0c8e-4062-a7eb-13897b2d7cdd/resourceGroups/RG-Kingston-POC/providers/Microsoft.Logic/workflows/LA.CreateTerm.Canvas'.",
      "type": "Microsoft.Logic/workflows",
      "name": "[parameters('LA_CreateTerm_Name')]",
      "apiVersion": "2016-06-01",
      "location": "westeurope",
      "tags": {
        "displayName": "LA.CreateTerm.Canvas"
      },
      "properties": {
        "state": "Enabled",
        "integrationAccount": {
          "id": "[concat(subscription().id, '/resourceGroups/', parameters('integrationAccountRGName'), '/providers/Microsoft.Logic/integrationAccounts/', parameters('integrationAccountName'))]"
        },
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": { },
              "type": "Object"
            }
          },
          "triggers": {
            "When_a_message_is_received_in_a_topic_subscription_(auto-complete)": {
              "recurrence": {
                "frequency": "Minute",
                "interval": 1
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "api": {
                    "runtimeUrl": "https://logic-apis-westeurope.azure-apim.net/apim/servicebus"
                  },
                  "connection": {
                    "name": "@parameters('$connections')['servicebus1']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/@{encodeURIComponent('CreateTerm')}/subscriptions/@{encodeURIComponent('CreateTermSubscription')}/messages/head",
                "queries": {
                  "subscriptionType": "Main"
                }
              }
            }
          },
          "actions": {
            "Filter_Result": {
              "runAfter": {
                "Scope": [
                  "Failed"
                ]
              },
              "type": "Query",
              "inputs": {
                "from": "@result('Scope')",
                "where": "@equals(item()['status'], 'Failed')"
              }
            },
            "For_each": {
              "foreach": "@body('Filter_Result')",
              "actions": {
                "Log_Failures": {
                  "runAfter": { },
                  "type": "ApiManagement",
                  "inputs": {
                    "api": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_logging'))]"
                    },
                     "body": "@item()?['outputs']?['body']",
                    "headers": {
                      "correlationId": "@item()['clientTrackingId']",
                      "failedActionName": "@item()['name']",
                      "loggingStatus": "@item()['status']",
                      "sis_course_id": "",
                      "sis_student_id": "",
                      "sis_term_id": "@{concat(json(decodeBase64(triggerBody()['ContentData']))['Term']['PeriodSlotCode'], json(decodeBase64(triggerBody()['ContentData']))['Term']['AcademicYearCode'])}"
                    },
                    "method": "post",
                    "pathTemplate": {
                      "parameters": {
                        "status": "@item()['status']"
                      },
                      "template": "/api/logging/logsubscribermessage/{status}"
                    },
                    "subscriptionKey": "[parameters('apim_service_logging_subscriptionkey')]"
                  }
                }
              },
              "runAfter": {
                "Filter_Result": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "Log_Subscriber_Message": {
              "runAfter": { },
              "type": "ApiManagement",
              "inputs": {
                "api": {
                  "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_logging'))]"
                },
                "body": "@{decodeBase64(triggerBody()['ContentData'])}",
                "headers": {
                  "correlationId": "@triggerOutputs()['headers']?['X-Ms-Client-Tracking-Id']",
                  "failedActionName": "",
                  "loggingStatus": "Success",
                  "sis_course_id": "",
                  "sis_student_id": "",
                  "sis_term_id": "@{concat(json(decodeBase64(triggerBody()['ContentData']))['Term']['PeriodSlotCode'], json(decodeBase64(triggerBody()['ContentData']))['Term']['AcademicYearCode'])}"
                },
                "method": "post",
                "pathTemplate": {
                  "parameters": {
                    "status": "@{encodeURIComponent('Success')}"
                  },
                  "template": "/api/logging/logsubscribermessage/{status}"
                },
                "subscriptionKey": "[parameters('apim_service_logging_subscriptionkey')]"
              }
            },
            "Scope": {
              "actions": {
                "ConvertJsonToXml": {
                  "runAfter": { },
                  "type": "Function",
                  "inputs": {
                    "body": "@{decodeBase64(triggerBody()['ContentData'])}",
                    "function": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/ConvertJsonToXml')]"
                    },
                    "headers": {
                      "Content-Type": "application/json"
                    }
                  }
                },
                "Create_Term": {
                  "runAfter": {
                    "FormatJsonPayloadOmitRoot": [
                      "Succeeded"
                    ]
                  },
                  "type": "ApiManagement",
                  "inputs": {
                    "api": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                    },
                    "body": "@body('FormatJsonPayloadOmitRoot')",
                    "headers": {
                      "Content-Type": "application/json"
                    },
                    "method": "post",
                    "pathTemplate": {
                      "parameters": { },
                      "template": "/VLE/Canvas/api/v1/accounts/1/terms"
                    },
                    "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                  }
                },
                "FormatJsonPayloadOmitRoot": {
                  "runAfter": {
                    "Transform_XML": [
                      "Succeeded"
                    ]
                  },
                  "type": "Function",
                  "inputs": {
                    "body": "@{json(body('Transform_XML'))}",
                    "function": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/FormatJsonPayloadOmitRoot')]"
                    },
                    "headers": {
                      "Content-Type": "application/json"
                    }
                  }
                },
                "Transform_XML": {
                  "runAfter": {
                    "ConvertJsonToXml": [
                      "Succeeded"
                    ]
                  },
                  "type": "Xslt",
                  "inputs": {
                    "content": "@{body('ConvertJsonToXml')}",
                    "function": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/TransformContainer')]"
                    },
                    "integrationAccount": {
                      "map": {
                        "name": "Canonical.TermToCanvas.CreateTerm"
                      }
                    }
                  }
                }
              },
              "runAfter": { },
              "type": "Scope"
            }
          },
          "outputs": { }
        },
        "parameters": {
          "$connections": {
            "value": {
              "servicebus1": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/servicebus')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('serviceBusConnectionName'))]"
              }
            }
          }
        }
      },
      "resources": [ ],
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('serviceBusConnectionName'))]"
      ]
    },

    {
      "comments": "Generalized from resource: '/subscriptions/59917f2a-0c8e-4062-a7eb-13897b2d7cdd/resourceGroups/RG-Kingston-POC/providers/Microsoft.Logic/workflows/LA.EditTerm.Canvas'.",
      "type": "Microsoft.Logic/workflows",
      "name": "[parameters('LA_EditTerm_Name')]",
      "apiVersion": "2016-06-01",
      "location": "westeurope",
      "tags": {
        "displayName": "LA.EditTerm.Canvas"
      },
      "properties": {
        "state": "Enabled",
        "integrationAccount": {
          "id": "[concat(subscription().id, '/resourceGroups/', parameters('integrationAccountRGName'), '/providers/Microsoft.Logic/integrationAccounts/', parameters('integrationAccountName'))]"
        },
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": { },
              "type": "Object"
            }
          },
          "triggers": {
            "When_a_message_is_received_in_a_topic_subscription_(auto-complete)": {
              "recurrence": {
                "frequency": "Minute",
                "interval": 1
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "api": {
                    "runtimeUrl": "https://logic-apis-westeurope.azure-apim.net/apim/servicebus"
                  },
                  "connection": {
                    "name": "@parameters('$connections')['servicebus1']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/@{encodeURIComponent('editterm')}/subscriptions/@{encodeURIComponent('EditTermSubscription')}/messages/head",
                "queries": {
                  "subscriptionType": "Main"
                }
              }
            }
          },
          "actions": {
            "Filter_Result": {
              "runAfter": {
                "Scope": [
                  "Failed"
                ]
              },
              "type": "Query",
              "inputs": {
                "from": "@result('Scope')",
                "where": "@equals(item()['status'], 'Failed')"
              }
            },
            "For_each": {
              "foreach": "@body('Filter_Result')",
              "actions": {
                "Log_Failures": {
                  "runAfter": { },
                  "type": "ApiManagement",
                  "inputs": {
                    "api": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_logging'))]"
                    },
                    "body": "@item()?['outputs']?['body']",
                    "headers": {
                      "correlationId": "@item()['clientTrackingId']",
                      "failedActionName": "@item()['name']",
                      "loggingStatus": "@item()['status']",
                      "sis_course_id": "",
                      "sis_student_id": "",
                      "sis_term_id": "@{concat(json(decodeBase64(triggerBody()['ContentData']))['Term']['PeriodSlotCode'], json(decodeBase64(triggerBody()['ContentData']))['Term']['AcademicYearCode'])}"
                    },
                    "method": "post",
                    "pathTemplate": {
                      "parameters": {
                        "status": "@item()['status']"
                      },
                      "template": "/api/logging/logsubscribermessage/{status}"
                    },
                    "subscriptionKey": "[parameters('apim_service_logging_subscriptionkey')]"
                  }
                }
              },
              "runAfter": {
                "Filter_Result": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "Log_Subscriber_Message": {
              "runAfter": { },
              "type": "ApiManagement",
              "inputs": {
                "api": {
                  "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_logging'))]"
                },
                "body": "@{decodeBase64(triggerBody()['ContentData'])}",
                "headers": {
                  "correlationId": "@triggerOutputs()['headers']?['X-Ms-Client-Tracking-Id']",
                  "failedActionName": "",
                  "loggingStatus": "Success",
                  "sis_course_id": "",
                  "sis_student_id": "",
                  "sis_term_id": "@{concat(json(decodeBase64(triggerBody()['ContentData']))['Term']['PeriodSlotCode'], json(decodeBase64(triggerBody()['ContentData']))['Term']['AcademicYearCode'])}"
                },
                "method": "post",
                "pathTemplate": {
                  "parameters": {
                    "status": "@{encodeURIComponent('Success')}"
                  },
                  "template": "/api/logging/logsubscribermessage/{status}"
                },
                "subscriptionKey": "[parameters('apim_service_logging_subscriptionkey')]"
              }
            },
            "Scope": {
              "actions": {
                "Compose": {
                  "runAfter": {
                    "FormatJsonPayloadOmitRoot": [
                      "Succeeded"
                    ]
                  },
                  "type": "Compose",
                  "inputs": "@{body('FormatJsonPayloadOmitRoot')['enrollment_term']['sis_term_id']}"
                },
                "ConvertJsonToXml": {
                  "runAfter": { },
                  "type": "Function",
                  "inputs": {
                    "body": "@{decodeBase64(triggerBody()['ContentData'])}",
                    "function": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/ConvertJsonToXml')]"
                    },
                    "headers": {
                      "Content-Type": "application/json"
                    }
                  }
                },
                "Edit_Term": {
                  "runAfter": {
                    "Filter_Get_Enrollment_Terms": [
                      "Succeeded"
                    ]
                  },
                  "type": "ApiManagement",
                  "inputs": {
                    "api": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                    },
                    "body": "@body('FormatJsonPayloadOmitRoot')",
                    "headers": {
                      "Content-Type": "application/json"
                    },
                    "method": "put",
                    "pathTemplate": {
                      "parameters": {
                        "termid": "@body('Filter_Get_Enrollment_Terms')[0]['id']"
                      },
                      "template": "/VLE/Canvas/api/v1/accounts/1/terms/{termid}"
                    },
                    "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                  }
                },
                "Filter_Get_Enrollment_Terms": {
                  "runAfter": {
                    "Until_Get_Enrolment_Terms": [
                      "Succeeded"
                    ]
                  },
                  "type": "Query",
                  "inputs": {
                    "from": "@body('Get_Enrolment_Terms')['enrollment_terms']",
                    "where": "@equals(item()['sis_term_id'], outputs('Compose'))"
                  }
                },
                "FormatJsonPayloadOmitRoot": {
                  "runAfter": {
                    "Transform_XML": [
                      "Succeeded"
                    ]
                  },
                  "type": "Function",
                  "inputs": {
                    "body": "@{json(body('Transform_XML'))}",
                    "function": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/FormatJsonPayloadOmitRoot')]"
                    },
                    "headers": {
                      "Content-Type": "application/json"
                    }
                  }
                },
                "Transform_XML": {
                  "runAfter": {
                    "ConvertJsonToXml": [
                      "Succeeded"
                    ]
                  },
                  "type": "Xslt",
                  "inputs": {
                    "content": "@{body('ConvertJsonToXml')}",
                    "function": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/TransformContainer')]"
                    },
                    "integrationAccount": {
                      "map": {
                        "name": "Canonical.TermToCanvas.CreateTerm"
                      }
                    }
                  }
                },
                "Until_Get_Enrolment_Terms": {
                  "actions": {
                    "Get_Enrolment_Terms": {
                      "runAfter": { },
                      "type": "ApiManagement",
                      "inputs": {
                        "api": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                        },
                        "method": "get",
                        "pathTemplate": {
                          "parameters": { },
                          "template": "/VLE/Canvas/api/v1/accounts/1/terms"
                        },
                        "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                      }
                    }
                  },
                  "runAfter": {
                    "Compose": [
                      "Succeeded"
                    ]
                  },
                  "expression": "@and(equals(actions('Get_Enrolment_Terms')?['status'], 'Succeeded'),\n\tnot(empty(coalesce(outputs('Get_Enrolment_Terms')['body'], ''))))",
                  "limit": {
                    "count": 60,
                    "timeout": "PT1H"
                  },
                  "type": "Until"
                }
              },
              "runAfter": { },
              "type": "Scope"
            }
          },
          "outputs": { }
        },
        "parameters": {
          "$connections": {
            "value": {
              "servicebus1": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/servicebus')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('serviceBusConnectionName'))]"
              }
            }
          }
        }
      },
      "resources": [ ],
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('serviceBusConnectionName'))]"
      ]
    },
    {
      "comments": "Generalized from resource: '/subscriptions/59917f2a-0c8e-4062-a7eb-13897b2d7cdd/resourceGroups/RG-Kingston-POC/providers/Microsoft.Logic/workflows/LA.CreateCourse.Canvas'.",
      "type": "Microsoft.Logic/workflows",
      "name": "[parameters('LA_CreateCourse_Name')]",
      "apiVersion": "2016-06-01",
      "location": "westeurope",
      "tags": {
        "displayName": "LA.CreateCourse.Canvas"
      },
      "properties": {
        "state": "Enabled",
        "integrationAccount": {
          "id": "[concat(subscription().id, '/resourceGroups/', parameters('integrationAccountRGName'), '/providers/Microsoft.Logic/integrationAccounts/', parameters('integrationAccountName'))]"
        },
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": { },
              "type": "Object"
            }
          },
          "triggers": {
            "When_a_message_is_received_in_a_topic_subscription_(auto-complete)": {
              "recurrence": {
                "frequency": "Minute",
                "interval": 1
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "api": {
                    "runtimeUrl": "https://logic-apis-westeurope.azure-apim.net/apim/servicebus"
                  },
                  "connection": {
                    "name": "@parameters('$connections')['servicebus1']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/@{encodeURIComponent('CreateCourse')}/subscriptions/@{encodeURIComponent('CreateCourseSubscription')}/messages/head",
                "queries": {
                  "subscriptionType": "Main"
                }
              }
            }
          },
          "actions": {
            
            "Log_Subscriber_Message": {
              "runAfter": { },
              "type": "ApiManagement",
              "inputs": {
                "api": {
                  "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_logging'))]"
                },
                "method": "post",
                "body": "@{decodeBase64(triggerBody()['ContentData'])}",
                "headers": {
                  "correlationId": "@triggerOutputs()['headers']?['X-Ms-Client-Tracking-Id']",
                  "failedActionName": "",
                  "loggingStatus": "Success",
                  "sis_course_id": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['SIS_Course_Id']}",
                  "sis_student_id": "",
                  "sis_term_id": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['SIS_Term_Id']}"
                },
                "pathTemplate": {
                  "parameters": {
                    "status": "@{encodeURIComponent('Success')}"
                  },
                  "template": "/api/logging/logsubscribermessage/{status}"
                },
                "subscriptionKey": "[parameters('apim_service_logging_subscriptionkey')]"
              }
            },
            "SPAN1_Course": {
              "actions": {
                "Filter_Result": {
                  "runAfter": {
                    "Scope": [
                      "Failed"
                    ]
                  },
                  "type": "Query",
                  "inputs": {
                    "from": "@result('Scope')",
                    "where": "@equals(item()['status'], 'Failed')"
                  }
                },
                "For_each": {
                  "foreach": "@body('Filter_Result')",
                  "actions": {
                    "Log_Failures": {
                      "runAfter": { },
                      "type": "ApiManagement",
                      "inputs": {
                        "api": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_logging'))]"
                        },
                        "method": "post",
                        "body": "@item()?['outputs']?['body']",
                        "headers": {
                          "correlationId": "@item()['clientTrackingId']",
                          "failedActionName": "@item()['name']",
                          "loggingStatus": "@item()['status']",
                          "sis_course_id": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['SIS_Course_Id']}",
                          "sis_student_id": "",
                          "sis_term_id": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['SIS_Term_Id']}"
                        },
                        "pathTemplate": {
                          "parameters": {
                            "status": "@item()['status']"
                          },
                          "template": "/api/logging/logsubscribermessage/{status}"
                        },
                        "subscriptionKey": "[parameters('apim_service_logging_subscriptionkey')]"
                      }
                    }
                  },
                  "runAfter": {
                    "Filter_Result": [
                      "Succeeded"
                    ]
                  },
                  "type": "Foreach"
                },
                "Scope": {
                  "actions": {
                    "Compose": {
                      "runAfter": { },
                      "type": "Compose",
                      "inputs": {
                        "deptcode": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['DepartmentCode']}",
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "sis_course_id": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['SIS_Course_Id']}",
                        "sis_deptcode": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['DepartmentCode']}",
                        "sis_section_id": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['SIS_Section_Id']}",
                        "sis_term_id": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['SIS_Term_Id']}"
                      }
                    },
                    "Compose_CreateCourse": {
                      "runAfter": {
                        "Until_Search_User": [
                          "Succeeded"
                        ]
                      },
                      "type": "Compose",
                      "inputs": {
                        "course": {
                          "course_code": "@outputs('Compose')['sis_course_id']",
                          "name": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['Name']}",
                          "sis_course_id": "@outputs('Compose')['sis_course_id']",
                          "term_id": "@body('Filter_Enrollment_Term')[0]['id']"
                        }
                      }
                    },
                    "Compose_CreateSection": {
                      "runAfter": {
                        "Create_Course": [
                          "Succeeded"
                        ]
                      },
                      "type": "Compose",
                      "inputs": {
                        "course_section": {
                          "name": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['Name']}",
                          "restrict_enrollments_to_section_dates": "true",
                          "sis_section_id": "@outputs('Compose')['sis_section_id']"
                        }
                      }
                    },
                    "Compose_Enroll_Section_Message": {
                      "runAfter": {
                        "FormatJsonPayload": [
                          "Succeeded"
                        ]
                      },
                      "type": "Compose",
                      "inputs": {
                        "enrollment": {
                          "enrollment_state": "active",
                          "role_id": 14,
                          "type": "TeacherEnrollment",
                          "user_id": "@{json(string(body('Search_User')[0]['id']))}"
                        }
                      }
                    },

                    "Create_Course": {
                      "runAfter": {
                        "Format_Enroll_Section_Message": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiManagement",
                      "inputs": {
                        "api": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                        },
                        "body": "@body('FormatJsonPayload')",
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "method": "post",
                        "pathTemplate": {
                          "parameters": {
                            "subaccountid": "@body('Search_Sub_Accounts')['id']"
                          },
                          "template": "/VLE/Canvas/api/v1/accounts/{subaccountid}/courses"
                        },
                        "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                      }
                    },
                    "Create_Section": {
                      "runAfter": {
                        "Format_Create_Section_Message": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiManagement",
                      "inputs": {
                        "api": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                        },
                        "body": "@body('Format_Create_Section_Message')",
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "method": "post",
                        "pathTemplate": {
                          "parameters": {
                            "course_id": "@body('Create_Course')['id']"
                          },
                          "template": "/VLE/Canvas/api/v1/courses/{course_id}/sections"
                        },
                        "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                      }
                    },
                    "Enroll_User_to_Section": {
                      "runAfter": {
                        "Create_Section": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiManagement",
                      "inputs": {
                        "api": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                        },
                        "body": "@body('Format_Enroll_Section_Message')",
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "method": "post",
                        "pathTemplate": {
                          "parameters": {
                            "section_id": "@body('Create_Section')['id']"
                          },
                          "template": "/VLE/Canvas/api/v1/sections/{section_id}/enrollments"
                        },
                        "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                      }
                    },
                    "Enroll_User_to_Section_2": {
                      "runAfter": {
                        "Get_Course_Sections": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiManagement",
                      "inputs": {
                        "api": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                        },
                        "body": "@body('Format_Enroll_Section_Message')",
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "method": "post",
                        "pathTemplate": {
                          "parameters": {
                            "section_id": "@{json(string(body('Get_Course_Sections')[0]['id']))}"
                          },
                          "template": "/VLE/Canvas/api/v1/sections/{section_id}/enrollments"
                        },
                        "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                      }
                    },
                    "Filter_Enrollment_Term": {
                      "runAfter": {
                        "Until_Get_Enrollment_Terms": [
                          "Succeeded"
                        ]
                      },
                      "type": "Query",
                      "inputs": {
                        "from": "@body('Get_Enrolment_Terms')['enrollment_terms']",
                        "where": "@equals(item()['sis_term_id'], outputs('Compose')['sis_term_id'])"
                      }
                    },
                    "FormatJsonPayload": {
                      "runAfter": {
                        "Compose_CreateCourse": [
                          "Succeeded"
                        ]
                      },
                      "type": "Function",
                      "inputs": {
                        "body": "@{json(string(outputs('Compose_CreateCourse')))}",
                        "function": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/FormatJsonPayload')]"
                        },
                        "headers": {
                          "Content-Type": "application/json"
                        }
                      }
                    },
                    "Format_Create_Section_Message": {
                      "runAfter": {
                        "Compose_CreateSection": [
                          "Succeeded"
                        ]
                      },
                      "type": "Function",
                      "inputs": {
                        "body": "@outputs('Compose_CreateSection')",
                        "function": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/FormatJsonPayload')]"
                        }
                      }
                    },
                    "Format_Enroll_Section_Message": {
                      "runAfter": {
                        "Compose_Enroll_Section_Message": [
                          "Succeeded"
                        ]
                      },
                      "type": "Function",
                      "inputs": {
                        "body": "@outputs('Compose_Enroll_Section_Message')",
                        "function": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/FormatJsonPayload')]"
                        }
                      }
                    },

                    "Get_Course_Sections": {
                      "runAfter": {
                        "Search_Course": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiManagement",
                      "inputs": {
                        "api": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                        },
                        "method": "get",
                        "pathTemplate": {
                          "parameters": {
                            "course_id": "@{json(string(body('Search_Course')[0]['id']))}"
                          },
                          "template": "/VLE/Canvas/api/v1/courses/{course_id}/sections"
                        },
                        "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                      }
                    },
                    "Search_Course": {
                      "runAfter": {
                        "Create_Course": [
                          "Failed"
                        ]
                      },
                      "type": "ApiManagement",
                      "inputs": {
                        "api": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                        },
                        "method": "get",
                        "pathTemplate": {
                          "parameters": { },
                          "template": "/VLE/Canvas/api/v1/accounts/1/courses"
                        },
                        "queries": {
                          "search_term": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['SIS_Course_Id']}"
                        },
                        "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                      }
                    },
                    "Until_Get_Enrollment_Terms": {
                      "actions": {
                        "Get_Enrolment_Terms": {
                          "runAfter": { },
                          "type": "ApiManagement",
                          "inputs": {
                            "api": {
                              "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                            },
                            "method": "get",
                            "pathTemplate": {
                              "parameters": { },
                              "template": "/VLE/Canvas/api/v1/accounts/1/terms"
                            },
                            "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                          }
                        }
                      },
                      "runAfter": {
                        "Until_Search_Sub_Accounts": [
                          "Succeeded"
                        ]
                      },
                      "expression": "@and(equals(actions('Get_Enrolment_Terms')?['status'], 'Succeeded'),\n\tnot(empty(coalesce(outputs('Get_Enrolment_Terms')['body'], ''))))",
                      "limit": {
                        "count": 60,
                        "timeout": "PT1H"
                      },
                      "type": "Until"
                    },
                    "Until_Search_Sub_Accounts": {
                      "actions": {
                        "Search_Sub_Accounts": {
                          "runAfter": { },
                          "type": "ApiManagement",
                          "inputs": {
                            "api": {
                              "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                            },
                            "method": "get",
                            "pathTemplate": {
                              "parameters": {
                                "sis_account_id": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['DepartmentCode']}"
                              },
                              "template": "/VLE/Canvas/api/v1/accounts/sis_account_id:{sis_account_id}"
                            },
                            "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                          }
                        }
                      },
                      "runAfter": {
                        "Compose": [
                          "Succeeded"
                        ]
                      },
                      "expression": "@and(equals(actions('Search_Sub_Accounts')?['status'], 'Succeeded'),\n\tnot(empty(coalesce(outputs('Search_Sub_Accounts')['body'], ''))))",
                      "limit": {
                        "count": 60,
                        "timeout": "PT1H"
                      },
                      "type": "Until"
                    },
                    "Until_Search_User": {
                      "actions": {
                        "Search_User": {
                          "runAfter": { },
                          "type": "ApiManagement",
                          "inputs": {
                            "api": {
                              "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                            },
                            "method": "get",
                            "pathTemplate": {
                              "parameters": { },
                              "template": "/VLE/Canvas/api/v1/accounts/1/users"
                            },
                            "queries": {
                              "search_term": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['PersonnelCode']}"
                            },
                            "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                          }
                        }
                      },
                      "runAfter": {
                        "Filter_Enrollment_Term": [
                          "Succeeded"
                        ]
                      },
                      "expression": "@and(equals(actions('Search_User')?['status'], 'Succeeded'),\n\tnot(empty(coalesce(outputs('Search_User')['body'], ''))))",
                      "limit": {
                        "count": 60,
                        "timeout": "PT1H"
                      },
                      "type": "Until"
                    }
                  },
                  "runAfter": { },
                  "type": "Scope"
                }
              },
              "else": {
                "actions": {
                  "Log_Undefined_Course_Failure": {
                    "inputs": {
                      "api": {
                        "id": "/subscriptions/7b9b37f6-5be9-4628-b44a-9df8c1ad51d6/resourceGroups/RG.ApiManagement/providers/Microsoft.ApiManagement/service/kingstonuniversity/apis/581f4ca6ab693f10e8a7db95"
                      },
                      "method": "post",
                      "body": "Undefined Course Format",
                      "headers": {
                        "correlationId": "@triggerOutputs()['headers']?['X-Ms-Client-Tracking-Id']",
                        "failedActionName": "",
                        "loggingStatus": "Success",
                        "sis_course_id": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['SIS_Course_Id']}",
                        "sis_student_id": "",
                        "sis_term_id": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['SIS_Term_Id']}"
                      },
                      "pathTemplate": {
                        "parameters": {
                          "status": "@{encodeURIComponent('Failure')}"
                        },
                        "template": "/api/logging/logsubscribermessage/{status}"
                      },
                      "subscriptionKey": "21529e0f3eb340f99c420a3141f48222"
                    },
                    "runAfter": { },
                    "type": "ApiManagement"
                  }
                }
              },
              "expression": "@and(not(equals(json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['PeriodSlotCode'], 'SPAN2')),\nnot(equals(json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['SIS_Course_Id'], 'undefined')))",
              "runAfter": { },
              "type": "If"
            }
          },
              "outputs": { }
            },
            "parameters": {
              "$connections": {
                "value": {
                  "servicebus1": {
                    "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/servicebus')]",
                    "connectionId": "[resourceId('Microsoft.Web/connections', variables('serviceBusConnectionName'))]"
                  }
                }
              }
            }
          },
      "resources": [ ],
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('serviceBusConnectionName'))]"
      ]
    },
    {
      "comments": "Generalized from resource: '/subscriptions/59917f2a-0c8e-4062-a7eb-13897b2d7cdd/resourceGroups/RG-Kingston-POC/providers/Microsoft.Logic/workflows/LA.EditCourse.Canvas'.",
      "type": "Microsoft.Logic/workflows",
      "name": "[parameters('LA_EditCourse_Name')]",
      "apiVersion": "2016-06-01",
      "location": "westeurope",
      "tags": {
        "displayName": "LA.EditCourse.Canvas"
      },
      "properties": {
        "state": "Enabled",
        "integrationAccount": {
          "id": "[concat(subscription().id, '/resourceGroups/', parameters('integrationAccountRGName'), '/providers/Microsoft.Logic/integrationAccounts/', parameters('integrationAccountName'))]"
        },
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": { },
              "type": "Object"
            }
          },
          "triggers": {
            "When_a_message_is_received_in_a_topic_subscription_(auto-complete)": {
              "recurrence": {
                "frequency": "Minute",
                "interval": 1
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "api": {
                    "runtimeUrl": "https://logic-apis-westeurope.azure-apim.net/apim/servicebus"
                  },
                  "connection": {
                    "name": "@parameters('$connections')['servicebus1']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/@{encodeURIComponent('editcourse')}/subscriptions/@{encodeURIComponent('EditCourseSubscription')}/messages/head",
                "queries": {
                  "subscriptionType": "Main"
                }
              }
            }
          },
          "actions": {
            "Filter_Result": {
              "runAfter": {
                "Scope": [
                  "Failed"
                ]
              },
              "type": "Query",
              "inputs": {
                "from": "@result('Scope')",
                "where": "@equals(item()['status'], 'Failed')"
              }
            },
            "For_each": {
              "foreach": "@body('Filter_Result')",
              "actions": {
                "Log_Failures": {
                  "runAfter": { },
                  "type": "ApiManagement",
                  "inputs": {
                    "api": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_logging'))]"
                    },
                    "method": "post",
                    "body": "@item()?['outputs']?['body']",
                    "headers": {
                      "correlationId": "@item()['clientTrackingId']",
                      "failedActionName": "@item()['name']",
                      "loggingStatus": "@item()['status']",
                      "sis_course_id": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['SIS_Course_Id']}",
                      "sis_student_id": "",
                      "sis_term_id": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['SIS_Term_Id']}"
                    },
                    "pathTemplate": {
                      "parameters": {
                        "status": "@item()['status']"
                      },
                      "template": "/api/logging/logsubscribermessage/{status}"
                    },
                    "subscriptionKey": "[parameters('apim_service_logging_subscriptionkey')]"
                  }
                }
              },
              "runAfter": {
                "Filter_Result": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "Log_Subscriber_Message": {
              "runAfter": { },
              "type": "ApiManagement",
              "inputs": {
                "api": {
                  "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_logging'))]"
                },
                "method": "post",
                "body": "@{decodeBase64(triggerBody()['ContentData'])}",
                "headers": {
                  "correlationId": "@triggerOutputs()['headers']?['X-Ms-Client-Tracking-Id']",
                  "failedActionName": "",
                  "loggingStatus": "Success",
                  "sis_course_id": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['SIS_Course_Id']}",
                  "sis_student_id": "",
                  "sis_term_id": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['SIS_Term_Id']}"
                },
                "pathTemplate": {
                  "parameters": {
                    "status": "@{encodeURIComponent('Success')}"
                  },
                  "template": "/api/logging/logsubscribermessage/{status}"
                },
                "subscriptionKey": "[parameters('apim_service_logging_subscriptionkey')]"
              }
            },
            "Scope": {
              "actions": {
                "Compose": {
                  "runAfter": {
                    "ConvertJsonToXml": [
                      "Succeeded"
                    ]
                  },
                  "type": "Compose",
                  "inputs": {
                    "deptcode": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['DepartmentCode']}",
                    "headers": {
                      "Content-Type": "application/json"
                    },
                    "sis_course_id": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['SIS_Course_Id']}",
                    "sis_deptcode": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['DepartmentCode']}",
                    "sis_section_id": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['SIS_Section_Id']}",
                    "sis_term_id": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['SIS_Term_Id']}"
                  }
                },
                "ConvertJsonToXml": {
                  "runAfter": { },
                  "type": "Function",
                  "inputs": {
                    "body": "@{decodeBase64(triggerBody()['ContentData'])}",
                    "function": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/ConvertJsonToXml')]"
                    },
                    "headers": {
                      "Content-Type": "application/json"
                    }
                  }
                },
                "Course_Exists": {
                  "actions": {
                    "Compose_EditCourse": {
                      "runAfter": {
                        "Until_Search_Sub_Accounts": [
                          "Succeeded"
                        ]
                      },
                      "type": "Compose",
                      "inputs": {
                        "course": {
                          "account_id": "@body('Search_Sub_Accounts')['id']",
                          "course_code": "@outputs('Compose')['sis_course_id']",
                          "name": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['Name']}",
                          "sis_course_id": "@outputs('Compose')['sis_course_id']",
                          "term_id": "@body('Filter_Enrollment_Term')[0]['id']"
                        }
                      }
                    },
                    "Compose_Edit_Section": {
                      "runAfter": {
                        "Until_Get_Course_Sections": [
                          "Succeeded"
                        ]
                      },
                      "type": "Compose",
                      "inputs": {
                        "course_section": {
                          "name": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['Name']}",
                          "restrict_enrollments_to_section_dates": "true",
                          "sis_section_id": "@outputs('Compose')['sis_section_id']"
                        }
                      }
                    },
                    "Compose_Enrollment_Message": {
                      "runAfter": {
                        "Until_Search_User": [
                          "Succeeded"
                        ]
                      },
                      "type": "Compose",
                      "inputs": {
                        "enrollment": {
                          "enrollment_state": "active",
                          "role_id": 14,
                          "type": "TeacherEnrollment",
                          "user_id": "@{json(string(body('Search_User')[0]['id']))}"
                        }
                      }
                    },
                    "Edit_Course": {
                      "runAfter": {
                        "Format_Edit_Course_Message": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiManagement",
                      "inputs": {
                        "api": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                        },
                        "body": "@body('Format_Edit_Course_Message')",
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "method": "put",
                        "pathTemplate": {
                          "parameters": {
                            "course_id": "@{json(string(body('Search_Course')[0]['id']))}"
                          },
                          "template": "/VLE/Canvas/api/v1/courses/{course_id}"
                        },
                        "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                      }
                    },
                    "Edit_Section": {
                      "runAfter": {
                        "Format_Edit_Section_Message": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiManagement",
                      "inputs": {
                        "api": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                        },
                        "body": "@body('Format_Edit_Section_Message')",
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "method": "put",
                        "pathTemplate": {
                          "parameters": {
                            "section_id": "@body('Get_Course_Sections')[0]['id']"
                          },
                          "template": "/VLE/Canvas/api/v1/sections/{section_id}"
                        },
                        "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                      }
                    },
                    "Enroll_User_to_Section": {
                      "runAfter": {
                        "Format_Enrollment_Message": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiManagement",
                      "inputs": {
                        "api": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                        },
                        "body": "@body('Format_Enrollment_Message')",
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "method": "post",
                        "pathTemplate": {
                          "parameters": {
                            "section_id": "@body('Edit_Section')['id']"
                          },
                          "template": "/VLE/Canvas/api/v1/sections/{section_id}/enrollments"
                        },
                        "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                      }
                    },
                    "Filter_Enrollment_Term": {
                      "runAfter": {
                        "Until_Get_Enrollment_Terms": [
                          "Succeeded"
                        ]
                      },
                      "type": "Query",
                      "inputs": {
                        "from": "@body('Get_Enrolment_Terms')['enrollment_terms']",
                        "where": "@equals(item()['sis_term_id'], json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['SIS_Term_Id'])"
                      }
                    },
                    "Format_Edit_Course_Message": {
                      "runAfter": {
                        "Compose_EditCourse": [
                          "Succeeded"
                        ]
                      },
                      "type": "Function",
                      "inputs": {
                        "body": "@outputs('Compose_EditCourse')",
                        "function": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/FormatJsonPayload')]"
                        }
                      }
                    },
                    "Format_Edit_Section_Message": {
                      "runAfter": {
                        "Compose_Edit_Section": [
                          "Succeeded"
                        ]
                      },
                      "type": "Function",
                      "inputs": {
                        "body": "@outputs('Compose_Edit_Section')",
                        "function": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/FormatJsonPayload')]"
                        }
                      }
                    },
                    "Format_Enrollment_Message": {
                      "runAfter": {
                        "Compose_Enrollment_Message": [
                          "Succeeded"
                        ]
                      },
                      "type": "Function",
                      "inputs": {
                        "body": "@{json(string(outputs('Compose_Enrollment_Message')))}",
                        "function": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/FormatJsonPayload')]"
                        },
                        "headers": {
                          "Content-Type": "application/json"
                        }
                      }
                    },
                    "Until_Get_Course_Sections": {
                      "actions": {
                        "Get_Course_Sections": {
                          "runAfter": { },
                          "type": "ApiManagement",
                          "inputs": {
                            "api": {
                              "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                            },
                            "method": "get",
                            "pathTemplate": {
                              "parameters": {
                                "course_id": "@body('Search_Course')[0]['id']"
                              },
                              "template": "/VLE/Canvas/api/v1/courses/{course_id}/sections"
                            },
                            "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                          }
                        }
                      },
                      "runAfter": {
                        "Edit_Course": [
                          "Succeeded"
                        ]
                      },
                      "expression": "@and(equals(actions('Get_Course_Sections')?['status'], 'Succeeded'),\n\tnot(empty(coalesce(outputs('Get_Course_Sections')['body'], ''))))",
                      "limit": {
                        "count": 5,
                        "timeout": "PT1H"
                      },
                      "type": "Until"
                    },
                    "Until_Get_Enrollment_Terms": {
                      "actions": {
                        "Get_Enrolment_Terms": {
                          "runAfter": { },
                          "type": "ApiManagement",
                          "inputs": {
                            "api": {
                              "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                            },
                            "method": "get",
                            "pathTemplate": {
                              "parameters": { },
                              "template": "/VLE/Canvas/api/v1/accounts/1/terms"
                            },
                            "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                          }
                        }
                      },
                      "runAfter": { },
                      "expression": "@and(equals(actions('Get_Enrolment_Terms')?['status'], 'Succeeded'),\n\tnot(empty(coalesce(outputs('Get_Enrolment_Terms')['body'], ''))))",
                      "limit": {
                        "count": 5,
                        "timeout": "PT1H"
                      },
                      "type": "Until"
                    },
                    "Until_Search_Sub_Accounts": {
                      "actions": {
                        "Search_Sub_Accounts": {
                          "runAfter": { },
                          "type": "ApiManagement",
                          "inputs": {
                            "api": {
                              "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                            },
                            "method": "get",
                            "pathTemplate": {
                              "parameters": {
                                "sis_account_id": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['DepartmentCode']}"
                              },
                              "template": "/VLE/Canvas/api/v1/accounts/sis_account_id:{sis_account_id}"
                            },
                            "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                          }
                        }
                      },
                      "runAfter": {
                        "Filter_Enrollment_Term": [
                          "Succeeded"
                        ]
                      },
                      "expression": "@and(equals(actions('Search_Sub_Accounts')?['status'], 'Succeeded'),\n\tnot(empty(coalesce(outputs('Search_Sub_Accounts')['body'], ''))))",
                      "limit": {
                        "count": 60,
                        "timeout": "PT1H"
                      },
                      "type": "Until"
                    },
                    "Until_Search_User": {
                      "actions": {
                        "Search_User": {
                          "runAfter": { },
                          "type": "ApiManagement",
                          "inputs": {
                            "api": {
                              "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                            },
                            "method": "get",
                            "pathTemplate": {
                              "parameters": { },
                              "template": "/VLE/Canvas/api/v1/accounts/1/users"
                            },
                            "queries": {
                              "search_term": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['PersonnelCode']}"
                            },
                            "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                          }
                        }
                      },
                      "runAfter": {
                        "Edit_Section": [
                          "Succeeded"
                        ]
                      },
                      "expression": "@and(equals(actions('Search_User')?['status'], 'Succeeded'),\n\tnot(empty(coalesce(outputs('Search_User')['body'], ''))))",
                      "limit": {
                        "count": 60,
                        "timeout": "PT1H"
                      },
                      "type": "Until"
                    }
                  },
                  "runAfter": {
                    "Until_Search_Course": [
                      "Succeeded"
                    ]
                  },
                  "else": {
                    "actions": {
                      "Log_Create_Course_Invoke": {
                        "inputs": {
                          "api": {
                            "id": "/subscriptions/7b9b37f6-5be9-4628-b44a-9df8c1ad51d6/resourceGroups/RG.ApiManagement/providers/Microsoft.ApiManagement/service/kingstonuniversity/apis/581f4ca6ab693f10e8a7db95"
                          },
                          "body": "Invoke Create Course",
                          "headers": {
                            "correlationId": "@triggerOutputs()['headers']?['X-Ms-Client-Tracking-Id']",
                            "failedActionName": "",
                            "loggingStatus": "Success",
                            "sis_course_id": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['SIS_Course_Id']}",
                            "sis_student_id": "",
                            "sis_term_id": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['SIS_Term_Id']}"
                          },
                          "method": "post",
                          "pathTemplate": {
                            "parameters": {
                              "status": "@{encodeURIComponent('Success')}"
                            },
                            "template": "/api/logging/logsubscribermessage/{status}"
                          },
                          "subscriptionKey": "21529e0f3eb340f99c420a3141f48222"
                        },
                        "runAfter": {
                          "Send_message": [
                            "Succeeded"
                          ]
                        },
                        "type": "ApiManagement"
                      },
                      "Send_message": {
                        "runAfter": { },
                        "type": "ApiConnection",
                        "inputs": {
                          "body": {
                            "ContentData": "@{triggerBody()?['ContentData']}",
                            "ContentType": "application/json"
                          },
                          "host": {
                            "api": {
                              "runtimeUrl": "https://logic-apis-westeurope.azure-apim.net/apim/servicebus"
                            },
                            "connection": {
                              "name": "@parameters('$connections')['servicebus1']['connectionId']"
                            }
                          },
                          "method": "post",
                          "path": "/@{encodeURIComponent('CREATECOURSE')}/messages"
                        }
                      }
                    }
                  },
                  "expression": "@not(empty(coalesce(outputs('Search_Course')['body'], '')))",
                  "type": "If"
                },
                "Until_Search_Course": {
                  "actions": {
                    "Search_Course": {
                      "runAfter": { },
                      "type": "ApiManagement",
                      "inputs": {
                        "api": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                        },
                        "method": "get",
                        "pathTemplate": {
                          "parameters": { },
                          "template": "/VLE/Canvas/api/v1/accounts/1/courses"
                        },
                        "queries": {
                          "search_term": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['SIS_Course_Id']}"
                        },
                        "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                      }
                    }
                  },
                  "runAfter": {
                    "Compose": [
                      "Succeeded"
                    ]
                  },
                  "expression": "@and(equals(actions('Search_Course')?['status'], 'Succeeded'),\n\tnot(empty(coalesce(outputs('Search_Course')['body'], ''))))",
                  "limit": {
                    "count": 5,
                    "timeout": "PT1H"
                  },
                  "type": "Until"
                }
              },
              "runAfter": {
                "Log_Subscriber_Message": [
                  "Succeeded"
                ]
              },
              "type": "Scope"
            }
          },
          "outputs": { }
        },
        "parameters": {
          "$connections": {
            "value": {
              "servicebus1": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/servicebus')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('serviceBusConnectionName'))]"
              }
            }
          }
        }
      },
      "resources": [ ],
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('serviceBusConnectionName'))]"
      ]
    },
    {
      "comments": "Generalized from resource: '/subscriptions/59917f2a-0c8e-4062-a7eb-13897b2d7cdd/resourceGroups/RG-Kingston-POC/providers/Microsoft.Logic/workflows/LA.CreateGroup.Canvas'.",
      "type": "Microsoft.Logic/workflows",
      "name": "[parameters('LA_CreateGroup_Name')]",
      "apiVersion": "2016-06-01",
      "location": "westeurope",
      "tags": {
        "displayName": "LA.CreateGroup.Canvas"
      },
      "properties": {
        "state": "Enabled",
        "integrationAccount": {
          "id": "[concat(subscription().id, '/resourceGroups/', parameters('integrationAccountRGName'), '/providers/Microsoft.Logic/integrationAccounts/', parameters('integrationAccountName'))]"
        },
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": { },
              "type": "Object"
            }
          },
          "triggers": {
            "When_a_message_is_received_in_a_topic_subscription_(auto-complete)": {
              "recurrence": {
                "frequency": "Minute",
                "interval": 1
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "api": {
                    "runtimeUrl": "https://logic-apis-westeurope.azure-apim.net/apim/servicebus"
                  },
                  "connection": {
                    "name": "@parameters('$connections')['servicebus1']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/@{encodeURIComponent('CreateGroup')}/subscriptions/@{encodeURIComponent('CreateGroupSubscription')}/messages/head",
                "queries": {
                  "subscriptionType": "Main"
                }
              }
            }
          },
          "actions": {
            "Compose": {
              "runAfter": {
                "Transform_XML": [
                  "Succeeded"
                ]
              },
              "type": "Compose",
              "inputs": {
                "deptcode": "@{json(decodeBase64(triggerBody()['ContentData']))['Group']['Courses']['Course']['DepartmentCode']}",
                "headers": {
                  "Content-Type": "application/json"
                }
              }
            },
            "ConvertJsonToXml": {
              "runAfter": { },
              "type": "Function",
              "inputs": {
                "body": "@{decodeBase64(triggerBody()['ContentData'])}",
                "function": {
                  "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/ConvertJsonToXml')]"
                },
                "headers": {
                  "Content-Type": "application/json"
                }
              }
            },
            "Create_Group": {
              "runAfter": {
                "Get_Group-Category_for_Sub-Account": [
                  "Succeeded"
                ]
              },
              "type": "ApiManagement",
              "inputs": {
                "api": {
                  "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                },
                "body": "@body('FormatJsonPayloadOmitRoot')",
                "headers": {
                  "Content-Type": "application/json"
                },
                "method": "post",
                "pathTemplate": {
                  "parameters": {
                    "groupcategoryid": "@{encodeURIComponent(body('Get_Group-Category_for_Sub-Account')[0]['id'])}"
                  },
                  "template": "/VLE/Canvas/api/v1/group_categories/{groupcategoryid}/groups"
                },
                "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
              }
            },
            "Filter_array": {
              "runAfter": {
                "Get_All_Sub-Accounts": [
                  "Succeeded"
                ]
              },
              "type": "Query",
              "inputs": {
                "from": "@body('Get_All_Sub-Accounts')",
                "where": "@equals(item()['sis_account_id'], outputs('Compose')['deptcode'])"
              }
            },
            "FormatJsonPayloadOmitRoot": {
              "runAfter": {
                "Compose": [
                  "Succeeded"
                ]
              },
              "type": "Function",
              "inputs": {
                "body": "@{json(body('Transform_XML'))}",
                "function": {
                  "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/FormatJsonPayloadOmitRoot')]"
                },
                "headers": {
                  "Content-Type": "application/json"
                }
              }
            },
            "Get_All_Sub-Accounts": {
              "runAfter": {
                "FormatJsonPayloadOmitRoot": [
                  "Succeeded"
                ]
              },
              "type": "ApiManagement",
              "inputs": {
                "api": {
                  "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                },
                "method": "get",
                "pathTemplate": {
                  "parameters": { },
                  "template": "/VLE/Canvas/api/v1/accounts/1/sub_accounts"
                },
                "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
              }
            },
            "Get_Group-Category_for_Sub-Account": {
              "runAfter": {
                "Filter_array": [
                  "Succeeded"
                ]
              },
              "type": "ApiManagement",
              "inputs": {
                "api": {
                  "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                },
                "method": "get",
                "pathTemplate": {
                  "parameters": {
                    "SubAccountId": "@body('Filter_array')[0]['id']"
                  },
                  "template": "/VLE/Canvas/api/v1/accounts/{SubAccountId}/group_categories"
                },
                "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
              }
            },
            "Transform_XML": {
              "runAfter": {
                "ConvertJsonToXml": [
                  "Succeeded"
                ]
              },
              "type": "Xslt",
              "inputs": {
                "content": "@{body('ConvertJsonToXml')}",
                "function": {
                  "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/TransformContainer')]"
                },
                "integrationAccount": {
                  "map": {
                    "name": "Canonical.GroupToCanvas.CreateGroup"
                  }
                }
              }
            }
          },
          "outputs": { }
        },
        "parameters": {
          "$connections": {
            "value": {
              "servicebus1": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/servicebus')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('serviceBusConnectionName'))]"
              }
            }
          }
        }
      },
      "resources": [ ],
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('serviceBusConnectionName'))]"
      ]
    },
    {
      "comments": "Generalized from resource: '/subscriptions/59917f2a-0c8e-4062-a7eb-13897b2d7cdd/resourceGroups/RG-Kingston-POC/providers/Microsoft.Logic/workflows/LA.CreateStaff.Canvas'.",
      "type": "Microsoft.Logic/workflows",
      "name": "[parameters('LA_CreateStaff_Name')]",
      "apiVersion": "2016-06-01",
      "location": "westeurope",
      "tags": {
        "displayName": "LA.CreateStaff.Canvas"
      },
      "properties": {
        "state": "Enabled",
        "integrationAccount": {
          "id": "[concat(subscription().id, '/resourceGroups/', parameters('integrationAccountRGName'), '/providers/Microsoft.Logic/integrationAccounts/', parameters('integrationAccountName'))]"
        },
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": { },
              "type": "Object"
            }
          },
          "triggers": {
            "When_a_message_is_received_in_a_topic_subscription_(auto-complete)": {
              "recurrence": {
                "frequency": "Minute",
                "interval": 1
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "api": {
                    "runtimeUrl": "https://logic-apis-westeurope.azure-apim.net/apim/servicebus"
                  },
                  "connection": {
                    "name": "@parameters('$connections')['servicebus1']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/@{encodeURIComponent('createstaff')}/subscriptions/@{encodeURIComponent('CreateStaffSubscription')}/messages/head",
                "queries": {
                  "subscriptionType": "Main"
                }
              }
            }
          },
          "actions": {
            "Filter_Result": {
              "runAfter": {
                "Scope": [
                  "Failed"
                ]
              },
              "type": "Query",
              "inputs": {
                "from": "@result('Scope')",
                "where": "@equals(item()['status'], 'Failed')"
              }
            },
            "For_each": {
              "foreach": "@body('Filter_Result')",
              "actions": {
                "Log_Failures": {
                  "runAfter": { },
                  "type": "ApiManagement",
                  "inputs": {
                    "api": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_logging'))]"
                    },
                    "body": "@item()?['outputs']?['body']",
                    "headers": {
                      "correlationId": "@item()['clientTrackingId']",
                      "failedActionName": "@item()['name']",
                      "loggingStatus": "@item()['status']",
                      "sis_course_id": "",
                      "sis_student_id": "@{json(decodeBase64(triggerBody()['ContentData']))['User']['StudentCourseEnrolments']['StudentCourseEnrolment']['Users']['User']['InstitutionEmailAddress']}",
                      "sis_term_id": ""
                    },
                    "method": "post",
                    "pathTemplate": {
                      "parameters": {
                        "status": "@item()['status']"
                      },
                      "template": "/api/logging/logsubscribermessage/{status}"
                    },
                    "subscriptionKey": "[parameters('apim_service_logging_subscriptionkey')]"
                  }
                }
              },
              "runAfter": {
                "Filter_Result": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "Log_Subscriber_Message": {
              "runAfter": { },
              "type": "ApiManagement",
              "inputs": {
                "api": {
                  "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_logging'))]"
                },
                "method": "post",
                "body": "@{decodeBase64(triggerBody()['ContentData'])}",
                "headers": {
                  "correlationId": "@triggerOutputs()['headers']?['X-Ms-Client-Tracking-Id']",
                  "failedActionName": "",
                  "loggingStatus": "Success",
                  "sis_course_id": "",
                  "sis_student_id": "@{json(decodeBase64(triggerBody()['ContentData']))['User']['StudentCourseEnrolments']['StudentCourseEnrolment']['Users']['User']['InstitutionEmailAddress']}",
                  "sis_term_id": ""
                },
                "pathTemplate": {
                  "parameters": {
                    "status": "@{encodeURIComponent('Success')}"
                  },
                  "template": "/api/logging/logsubscribermessage/{status}"
                },
                "subscriptionKey": "[parameters('apim_service_logging_subscriptionkey')]"
              }
            },
            "Scope": {
              "actions": {
                "Condition": {
                  "actions": {
                    "ConvertJsonToXml_EditUser": {
                      "runAfter": { },
                      "type": "Function",
                      "inputs": {
                        "body": "@{decodeBase64(triggerBody()['ContentData'])}",
                        "function": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/ConvertJsonToXml')]"
                        },
                        "headers": {
                          "Content-Type": "application/json"
                        }
                      }
                    },
                    "Edit_User": {
                      "runAfter": {
                        "FormatJsonPayloadOmitRoot_EditUser": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiManagement",
                      "inputs": {
                        "api": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                        },
                        "body": "@body('FormatJsonPayloadOmitRoot_EditUser')",
                        "headers": {
                          "Content-Type": "application/json"
                        },
                        "method": "put",
                        "pathTemplate": {
                          "parameters": {
                            "id": "@{encodeURIComponent(body('Search_User')[0]['id'])}"
                          },
                          "template": "/VLE/Canvas/api/v1/users/{id}"
                        },
                        "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                      }
                    },
                    "FormatJsonPayloadOmitRoot_EditUser": {
                      "runAfter": {
                        "Transform_EditUser": [
                          "Succeeded"
                        ]
                      },
                      "type": "Function",
                      "inputs": {
                        "body": "@{json(body('Transform_EditUser'))}",
                        "function": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/FormatJsonPayloadOmitRoot')]"
                        },
                        "headers": {
                          "Content-Type": "application/json"
                        }
                      }
                    },
                    "Transform_EditUser": {
                      "runAfter": {
                        "ConvertJsonToXml_EditUser": [
                          "Succeeded"
                        ]
                      },
                      "type": "Xslt",
                      "inputs": {
                        "content": "@{body('ConvertJsonToXml_EditUser')}",
                        "function": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/TransformContainer')]"
                        },
                        "integrationAccount": {
                          "map": {
                            "name": "Canonical.UserToCanvas.EditUser"
                          }
                        }
                      }
                    }
                  },
                  "runAfter": {
                    "Until_Search_User": [
                      "Succeeded"
                    ]
                  },
                  "else": {
                    "actions": {
                      "Compose_Enrolment_Message": {
                        "runAfter": {
                          "Create_User": [
                            "Succeeded"
                          ]
                        },
                        "type": "Compose",
                        "inputs": {
                          "enrollment": {
                            "enrollment_state": "active",
                            "type": "StudentEnrollment",
                            "user_id": "@body('Create_User')['id']"
                          }
                        }
                      },
                      "ConvertJsonToXml": {
                        "runAfter": { },
                        "type": "Function",
                        "inputs": {
                          "body": "@{decodeBase64(triggerBody()['ContentData'])}",
                          "function": {
                            "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/ConvertJsonToXml')]"
                          },
                          "headers": {
                            "Content-Type": "application/json"
                          }
                        }
                      },
                      "Create_User": {
                        "runAfter": {
                          "FormatJsonPayloadOmitRoot_CreateUser": [
                            "Succeeded"
                          ]
                        },
                        "type": "ApiManagement",
                        "inputs": {
                          "api": {
                            "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                          },
                          "body": "@body('FormatJsonPayloadOmitRoot_CreateUser')",
                          "headers": {
                            "Content-Type": "application/json"
                          },
                          "method": "post",
                          "pathTemplate": {
                            "parameters": { },
                            "template": "/VLE/Canvas/api/v1/accounts/1/users"
                          },
                          "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                        }
                      },
                      "Enroll_User_to_Course": {
                        "runAfter": {
                          "Until_Search_Course": [
                            "Succeeded"
                          ]
                        },
                        "type": "ApiManagement",
                        "inputs": {
                          "api": {
                            "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                          },
                          "body": "@body('Format_Enrolment_Message')",
                          "headers": {
                            "Content-Type": "application/json"
                          },
                          "method": "post",
                          "pathTemplate": {
                            "parameters": {
                              "course_id": "@body('Search_Course')[0]['id']"
                            },
                            "template": "/VLE/Canvas/api/v1/courses/{course_id}/enrollments"
                          },
                          "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                        }
                      },
                      "FormatJsonPayloadOmitRoot_CreateUser": {
                        "runAfter": {
                          "Transform_CreateUser": [
                            "Succeeded"
                          ]
                        },
                        "type": "Function",
                        "inputs": {
                          "body": "@{json(body('Transform_CreateUser'))}",
                          "function": {
                            "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/FormatJsonPayloadOmitRoot')]"
                          },
                          "headers": {
                            "Content-Type": "application/json"
                          }
                        }
                      },
                      "Format_Enrolment_Message": {
                        "runAfter": {
                          "Compose_Enrolment_Message": [
                            "Succeeded"
                          ]
                        },
                        "type": "Function",
                        "inputs": {
                          "body": "@{json(string(outputs('Compose_Enrolment_Message')))}",
                          "function": {
                            "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/FormatJsonPayload')]"
                          },
                          "headers": {
                            "Content-Type": "application/json"
                          }
                        }
                      },
                      "Transform_CreateUser": {
                        "runAfter": {
                          "ConvertJsonToXml": [
                            "Succeeded"
                          ]
                        },
                        "type": "Xslt",
                        "inputs": {
                          "content": "@{body('ConvertJsonToXml')}",
                          "function": {
                            "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/TransformContainer')]"
                          },
                          "integrationAccount": {
                            "map": {
                              "name": "Canonical.UserToCanvas.CreateUser"
                            }
                          }
                        }
                      },
                      "Until_Search_Course": {
                        "actions": {
                          "Search_Course": {
                            "runAfter": { },
                            "type": "ApiManagement",
                            "inputs": {
                              "api": {
                                "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                              },
                              "method": "get",
                              "pathTemplate": {
                                "parameters": { },
                                "template": "/VLE/Canvas/api/v1/accounts/1/courses"
                              },
                              "queries": {
                                "search_term": "Welcome"
                              },
                              "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                            }
                          }
                        },
                        "runAfter": {
                          "Format_Enrolment_Message": [
                            "Succeeded"
                          ]
                        },
                        "expression": "@and(equals(actions('Search_Course')?['status'], 'Succeeded'),\n\tnot(empty(coalesce(outputs('Search_Course')['body'], ''))))",
                        "limit": {
                          "count": 60,
                          "timeout": "PT1H"
                        },
                        "type": "Until"
                      }
                    }
                  },
                  "expression": "@and(equals(actions('Search_User')?['status'], 'Succeeded'),\n\tnot(empty(coalesce(outputs('Search_User')['body'], ''))))",
                  "type": "If"
                },
                "Until_Search_User": {
                  "actions": {
                    "Search_User": {
                      "runAfter": { },
                      "type": "ApiManagement",
                      "inputs": {
                        "api": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                        },
                        "method": "get",
                        "pathTemplate": {
                          "parameters": { },
                          "template": "/VLE/Canvas/api/v1/accounts/1/users"
                        },
                        "queries": {
                          "search_term": "@{json(decodeBase64(triggerBody()['ContentData']))['User']['StudentCourseEnrolments']['StudentCourseEnrolment']['Users']['User']['InstitutionEmailAddress']}"
                        },
                        "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                      }
                    }
                  },
                  "runAfter": { },
                  "expression": "@and(equals(actions('Search_User')?['status'], 'Succeeded'),\n\tnot(empty(coalesce(outputs('Search_User')['body'], ''))))",
                  "limit": {
                    "count": 1,
                    "timeout": "PT1H"
                  },
                  "type": "Until"
                }
              },
              "runAfter": {
                "Log_Subscriber_Message": [
                  "Succeeded"
                ]
              },
              "type": "Scope"
            }
          },
          "outputs": { }
        },
        "parameters": {
          "$connections": {
            "value": {
              "servicebus1": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/servicebus')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('serviceBusConnectionName'))]"
              }
            }
          }
        }
      },
      "resources": [ ],
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('serviceBusConnectionName'))]"
      ]
    },
    {
      "comments": "Generalized from resource: '/subscriptions/59917f2a-0c8e-4062-a7eb-13897b2d7cdd/resourceGroups/RG-Kingston-POC/providers/Microsoft.Logic/workflows/LA.DeleteCourse.Canvas'.",
      "type": "Microsoft.Logic/workflows",
      "name": "[parameters('LA_DeleteCourse_Name')]",
      "apiVersion": "2016-06-01",
      "location": "westeurope",
      "tags": {
        "displayName": "LA.DeleteCourse.Canvas"
      },
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": { },
              "type": "Object"
            }
          },
          "triggers": {
            "When_a_message_is_received_in_a_topic_subscription_(auto-complete)": {
              "recurrence": {
                "frequency": "Minute",
                "interval": 1
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "api": {
                    "runtimeUrl": "https://logic-apis-westeurope.azure-apim.net/apim/servicebus"
                  },
                  "connection": {
                    "name": "@parameters('$connections')['servicebus1']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/@{encodeURIComponent('deletecourse')}/subscriptions/@{encodeURIComponent('DeleteCourseSubscription')}/messages/head",
                "queries": {
                  "subscriptionType": "Main"
                }
              }
            }
          },
          "actions": {
            "Filter_Result": {
              "runAfter": {
                "Scope": [
                  "Failed"
                ]
              },
              "type": "Query",
              "inputs": {
                "from": "@result('Scope')",
                "where": "@equals(item()['status'], 'Failed')"
              }
            },
            "For_each": {
              "foreach": "@body('Filter_Result')",
              "actions": {
                "Log_Failures": {
                  "runAfter": { },
                  "type": "ApiManagement",
                  "inputs": {
                    "api": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_logging'))]"
                    },
                    "method": "post",
                    "body": "@item()?['outputs']?['body']",
                    "headers": {
                      "correlationId": "@item()['clientTrackingId']",
                      "failedActionName": "@item()['name']",
                      "loggingStatus": "@item()['status']",
                      "sis_course_id": "@{json(decodeBase64(triggerBody()['ContentData']))['sis_course_id']}",
                      "sis_student_id": "",
                      "sis_term_id": ""
                    },
                    "pathTemplate": {
                      "parameters": {
                        "status": "@item()['status']"
                      },
                      "template": "/api/logging/logsubscribermessage/{status}"
                    },
                    "subscriptionKey": "[parameters('apim_service_logging_subscriptionkey')]"
                  }
                }
              },
              "runAfter": {
                "Filter_Result": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "Log_Subscriber_Message": {
              "runAfter": { },
              "type": "ApiManagement",
              "inputs": {
                "api": {
                  "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_logging'))]"
                },
                "method": "post",
                "body": "@{decodeBase64(triggerBody()['ContentData'])}",
                "headers": {
                  "correlationId": "@triggerOutputs()['headers']?['X-Ms-Client-Tracking-Id']",
                  "failedActionName": "",
                  "loggingStatus": "Success",
                  "sis_course_id": "@{json(decodeBase64(triggerBody()['ContentData']))['sis_course_id']}",
                  "sis_student_id": "",
                  "sis_term_id": ""
                },
                "pathTemplate": {
                  "parameters": {
                    "status": "@{encodeURIComponent('Success')}"
                  },
                  "template": "/api/logging/logsubscribermessage/{status}"
                },
                "subscriptionKey": "[parameters('apim_service_logging_subscriptionkey')]"
              }
            },
            "Scope": {
              "actions": {
                "Compose_Update_Course": {
                  "runAfter": {
                    "Until_Search_Course": [
                      "Succeeded"
                    ]
                  },
                  "type": "Compose",
                  "inputs": {
                    "course": {
                      "event": "claim"
                    }
                  }
                },
                "Edit_Course": {
                  "runAfter": {
                    "Format_Update_Course": [
                      "Succeeded"
                    ]
                  },
                  "type": "ApiManagement",
                  "inputs": {
                    "api": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                    },
                    "body": "@body('Format_Update_Course')",
                    "headers": {
                      "Content-Type": "application/json"
                    },
                    "method": "put",
                    "pathTemplate": {
                      "parameters": {
                        "course_id": "@{json(string(body('Search_Course')[0]['id']))}"
                      },
                      "template": "/VLE/Canvas/api/v1/courses/{course_id}"
                    },
                    "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                  }
                },
                "Format_Update_Course": {
                  "runAfter": {
                    "Compose_Update_Course": [
                      "Succeeded"
                    ]
                  },
                  "type": "Function",
                  "inputs": {
                    "body": "@{json(string(outputs('Compose_Update_Course')))}",
                    "function": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/FormatJsonPayload')]"
                    },
                    "headers": {
                      "Content-Type": "application/json"
                    }
                  }
                },
                "Until_Search_Course": {
                  "actions": {
                    "Search_Course": {
                      "runAfter": { },
                      "type": "ApiManagement",
                      "inputs": {
                        "api": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                        },
                        "method": "get",
                        "pathTemplate": {
                          "parameters": { },
                          "template": "/VLE/Canvas/api/v1/accounts/1/courses"
                        },
                        "queries": {
                          "search_term": "@json(decodeBase64(triggerBody()['ContentData']))['sis_course_id']"
                        },
                        "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                      }
                    }
                  },
                  "runAfter": { },
                  "expression": "@and(equals(actions('Search_Course')?['status'], 'Succeeded'),\n\tnot(empty(coalesce(outputs('Search_Course')['body'], ''))))",
                  "limit": {
                    "count": 1,
                    "timeout": "PT1H"
                  },
                  "type": "Until"
                }
              },
              "runAfter": {
                "Log_Subscriber_Message": [
                  "Succeeded"
                ]
              },
              "type": "Scope"
            }
          },
          "outputs": { }
        },
        "parameters": {
          "$connections": {
            "value": {
              "servicebus1": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/servicebus')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('serviceBusConnectionName'))]"
              }
            }
          }
        }
      },
      "resources": [ ],
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('serviceBusConnectionName'))]"
      ]
    },
    {
      "comments": "Generalized from resource: '/subscriptions/59917f2a-0c8e-4062-a7eb-13897b2d7cdd/resourceGroups/RG-Kingston-POC/providers/Microsoft.Logic/workflows/LA.DeleteCourseEnrollment.Canvas'.",
      "type": "Microsoft.Logic/workflows",
      "name": "[parameters('LA_DeleteCourseEnrollment_Name')]",
      "apiVersion": "2016-06-01",
      "location": "westeurope",
      "tags": {
        "displayName": "LA.DeleteCourseEnrollment.Canvas"
      },
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": { },
              "type": "Object"
            }
          },
          "triggers": {
            "When_a_message_is_received_in_a_topic_subscription_(auto-complete)": {
              "recurrence": {
                "frequency": "Minute",
                "interval": 1
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "api": {
                    "runtimeUrl": "https://logic-apis-westeurope.azure-apim.net/apim/servicebus"
                  },
                  "connection": {
                    "name": "@parameters('$connections')['servicebus1']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/@{encodeURIComponent('deletecourseenrollment')}/subscriptions/@{encodeURIComponent('DeleteCourseEnrollmentSubscription')}/messages/head",
                "queries": {
                  "subscriptionType": "Main"
                }
              }
            }
          },
          "actions": {
            "Filter_Result": {
              "runAfter": {
                "Scope": [
                  "Failed"
                ]
              },
              "type": "Query",
              "inputs": {
                "from": "@result('Scope')",
                "where": "@equals(item()['status'], 'Failed')"
              }
            },
            "For_each": {
              "foreach": "@body('Filter_Result')",
              "actions": {
                "Log_Failures": {
                  "runAfter": { },
                  "type": "ApiManagement",
                  "inputs": {
                    "api": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_logging'))]"
                    },
                    "body": "@item()['outputs']['body']",
                    "headers": {
                      "correlationId": "@item()['clientTrackingId']",
                      "failedActionName": "@item()['name']",
                      "loggingStatus": "@item()['status']"
                    },
                    "method": "post",
                    "pathTemplate": {
                      "parameters": {
                        "status": "@item()['status']"
                      },
                      "template": "/api/logging/logmessage/{status}"
                    },
                    "subscriptionKey": "[parameters('apim_service_logging_subscriptionkey')]"
                  }
                }
              },
              "runAfter": {
                "Filter_Result": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "Log_Subscriber_Message": {
              "runAfter": { },
              "type": "ApiManagement",
              "inputs": {
                "api": {
                  "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_logging'))]"
                },
                "body": "@{decodeBase64(triggerBody()['ContentData'])}",
                "headers": {
                  "correlationId": "@triggerOutputs()['headers']?['X-Ms-Client-Tracking-Id']",
                  "failedActionName": "",
                  "loggingStatus": "Success"
                },
                "method": "post",
                "pathTemplate": {
                  "parameters": {
                    "status": "@{encodeURIComponent('Success')}"
                  },
                  "template": "/api/logging/logsubscribermessage/{status}"
                },
                "subscriptionKey": "[parameters('apim_service_logging_subscriptionkey')]"
              }
            },
            "Scope": {
              "actions": {
                "Delete_Course_Enrollment": {
                  "runAfter": {
                    "Filter_Enrollments": [
                      "Succeeded"
                    ]
                  },
                  "type": "ApiManagement",
                  "inputs": {
                    "api": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                    },
                    "method": "delete",
                    "pathTemplate": {
                      "parameters": {
                        "course_id": "@{json(string(body('Search_Course')[0]['id']))}",
                        "enrollment_id": "@{json(string(body('Filter_Enrollments')[0]['id']))}"
                      },
                      "template": "/VLE/Canvas/api/v1/courses/{course_id}/enrollments/{enrollment_id}"
                    },
                    "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                  }
                },
                "Filter_Enrollments": {
                  "runAfter": {
                    "Until_Get_All_Enrollments": [
                      "Succeeded"
                    ]
                  },
                  "type": "Query",
                  "inputs": {
                    "from": "@body('Get_All_Enrollments')",
                    "where": "@equals(item()['sis_user_id'], body('Search_User')[0]['sis_user_id'])"
                  }
                },
                "Until_Get_All_Enrollments": {
                  "actions": {
                    "Get_All_Enrollments": {
                      "runAfter": { },
                      "type": "ApiManagement",
                      "inputs": {
                        "api": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                        },
                        "method": "get",
                        "pathTemplate": {
                          "parameters": {
                            "course_id": "@{json(string(body('Search_Course')[0]['id']))}"
                          },
                          "template": "/VLE/Canvas/api/v1/courses/{course_id}/enrollments"
                        },
                        "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                      }
                    }
                  },
                  "runAfter": {
                    "Until_Search_User": [
                      "Succeeded"
                    ]
                  },
                  "expression": "@and(equals(actions('Get_All_Enrollments')?['status'], 'Succeeded'),\n\tnot(empty(coalesce(outputs('Get_All_Enrollments')['body'], ''))))",
                  "limit": {
                    "count": 60,
                    "timeout": "PT1H"
                  },
                  "type": "Until"
                },
                "Until_Search_Course": {
                  "actions": {
                    "Search_Course": {
                      "runAfter": { },
                      "type": "ApiManagement",
                      "inputs": {
                        "api": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                        },
                        "method": "get",
                        "pathTemplate": {
                          "parameters": { },
                          "template": "/VLE/Canvas/api/v1/accounts/1/courses"
                        },
                        "queries": {
                          "search_term": "@json(decodeBase64(triggerBody()['ContentData']))['sis_course_id']"
                        },
                        "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                      }
                    }
                  },
                  "runAfter": { },
                  "expression": "@and(equals(actions('Search_Course')?['status'], 'Succeeded'),\n\tnot(empty(coalesce(outputs('Search_Course')['body'], ''))))",
                  "limit": {
                    "count": 60,
                    "timeout": "PT1H"
                  },
                  "type": "Until"
                },
                "Until_Search_User": {
                  "actions": {
                    "Search_User": {
                      "runAfter": { },
                      "type": "ApiManagement",
                      "inputs": {
                        "api": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                        },
                        "method": "get",
                        "pathTemplate": {
                          "parameters": { },
                          "template": "/VLE/Canvas/api/v1/accounts/1/users"
                        },
                        "queries": {
                          "search_term": "@{json(decodeBase64(triggerBody()['ContentData']))['studentCode']}"
                        },
                        "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                      }
                    }
                  },
                  "runAfter": {
                    "Until_Search_Course": [
                      "Succeeded"
                    ]
                  },
                  "expression": "@and(equals(actions('Search_User')?['status'], 'Succeeded'),\n\tnot(empty(coalesce(outputs('Search_User')['body'], ''))))",
                  "limit": {
                    "count": 60,
                    "timeout": "PT1H"
                  },
                  "type": "Until"
                }
              },
              "runAfter": {
                "Log_Subscriber_Message": [
                  "Succeeded"
                ]
              },
              "type": "Scope"
            }
          },
          "outputs": { }
        },
        "parameters": {
          "$connections": {
            "value": {
              "servicebus1": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/servicebus')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('serviceBusConnectionName'))]"
              }
            }
          }
        }
      },
      "resources": [ ],
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('serviceBusConnectionName'))]"
      ]
    },
    {
      "comments": "Generalized from resource: '/subscriptions/59917f2a-0c8e-4062-a7eb-13897b2d7cdd/resourceGroups/RG-Kingston-POC/providers/Microsoft.Logic/workflows/LA.DeleteGroupMembership.Canvas'.",
      "type": "Microsoft.Logic/workflows",
      "name": "[parameters('LA_DeleteGroupMembership_Name')]",
      "apiVersion": "2016-06-01",
      "location": "westeurope",
      "tags": {
        "displayName": "LA.DeleteGroupMembership.Canvas"
      },
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": { },
              "type": "Object"
            }
          },
          "triggers": {
            "When_a_message_is_received_in_a_topic_subscription_(auto-complete)": {
              "recurrence": {
                "frequency": "Minute",
                "interval": 1
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "api": {
                    "runtimeUrl": "https://logic-apis-westeurope.azure-apim.net/apim/servicebus"
                  },
                  "connection": {
                    "name": "@parameters('$connections')['servicebus1']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/@{encodeURIComponent('deletegroupmembership')}/subscriptions/@{encodeURIComponent('DeleteGroupMembershipSubscription')}/messages/head",
                "queries": {
                  "subscriptionType": "Main"
                }
              }
            }
          },
          "actions": {
            "Filter_Result": {
              "runAfter": {
                "Scope": [
                  "Failed"
                ]
              },
              "type": "Query",
              "inputs": {
                "from": "@result('Scope')",
                "where": "@equals(item()['status'], 'Failed')"
              }
            },
            "For_each": {
              "foreach": "@body('Filter_Result')",
              "actions": {
                "Log_Failures": {
                  "runAfter": { },
                  "type": "ApiManagement",
                  "inputs": {
                    "api": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_logging'))]"
                    },
                    "method": "post",
                    "pathTemplate": {
                      "parameters": {
                        "status": "@item()['status']"
                      },
                      "template": "/api/logging/logmessage/{status}"
                    },
                    "subscriptionKey": "[parameters('apim_service_logging_subscriptionkey')]"
                  }
                }
              },
              "runAfter": {
                "Filter_Result": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "Log_Subscriber_Message": {
              "runAfter": { },
              "type": "ApiManagement",
              "inputs": {
                "api": {
                  "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_logging'))]"
                },
                "method": "post",
                "pathTemplate": {
                  "parameters": {
                    "status": "@{encodeURIComponent('Success')}"
                  },
                  "template": "/api/logging/logsubscribermessage/{status}"
                },
                "subscriptionKey": "[parameters('apim_service_logging_subscriptionkey')]"
              }
            },
            "Scope": {
              "actions": {
                "Filter_Groups": {
                  "runAfter": {
                    "Until_List_Groups_In_Context": [
                      "Succeeded"
                    ]
                  },
                  "type": "Query",
                  "inputs": {
                    "from": "@body('List_Groups_In_Context')",
                    "where": "@equals(item()['name'], json(decodeBase64(triggerBody()['ContentData']))['courseCode'])"
                  }
                },
                "Leave_A_Group": {
                  "runAfter": {
                    "Filter_Groups": [
                      "Succeeded"
                    ]
                  },
                  "type": "ApiManagement",
                  "inputs": {
                    "api": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                    },
                    "method": "delete",
                    "pathTemplate": {
                      "parameters": {
                        "group_id": "@{encodeURIComponent(body('Filter_Groups')[0]['id'])}",
                        "user_id": "@{encodeURIComponent(body('Search_User')[0]['id'])}"
                      },
                      "template": "/VLE/Canvas/api/v1/groups/{group_id}/users/{user_id}"
                    },
                    "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                  }
                },
                "Until_List_Groups_In_Context": {
                  "actions": {
                    "List_Groups_In_Context": {
                      "runAfter": { },
                      "type": "ApiManagement",
                      "inputs": {
                        "api": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                        },
                        "method": "get",
                        "pathTemplate": {
                          "parameters": {
                            "account_id": "@{encodeURIComponent(body('Search_Sub_Accounts')['id'])}"
                          },
                          "template": "/VLE/Canvas/api/v1/accounts/{account_id}/groups"
                        },
                        "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                      }
                    }
                  },
                  "runAfter": {
                    "Until_Search_Sub_Accounts": [
                      "Succeeded"
                    ]
                  },
                  "expression": "@and(equals(actions('List_Groups_In_Context')?['status'], 'Succeeded'),\n\tnot(empty(coalesce(outputs('List_Groups_In_Context')['body'], ''))))",
                  "limit": {
                    "count": 60,
                    "timeout": "PT1H"
                  },
                  "type": "Until"
                },
                "Until_Search_Sub_Accounts": {
                  "actions": {
                    "Search_Sub_Accounts": {
                      "runAfter": { },
                      "type": "ApiManagement",
                      "inputs": {
                        "api": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                        },
                        "method": "get",
                        "pathTemplate": {
                          "parameters": {
                            "sis_account_id": "@json(decodeBase64(triggerBody()['ContentData']))['departmentCode']"
                          },
                          "template": "/VLE/Canvas/api/v1/accounts/sis_account_id:{sis_account_id}"
                        },
                        "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                      }
                    }
                  },
                  "runAfter": {
                    "Until_Search_User": [
                      "Succeeded"
                    ]
                  },
                  "expression": "@and(equals(actions('Search_Sub_Accounts')?['status'], 'Succeeded'),\n\tnot(empty(coalesce(outputs('Search_Sub_Accounts')['body'], ''))))",
                  "limit": {
                    "count": 60,
                    "timeout": "PT1H"
                  },
                  "type": "Until"
                },
                "Until_Search_User": {
                  "actions": {
                    "Search_User": {
                      "runAfter": { },
                      "type": "ApiManagement",
                      "inputs": {
                        "api": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                        },
                        "method": "get",
                        "pathTemplate": {
                          "parameters": { },
                          "template": "/VLE/Canvas/api/v1/accounts/1/users"
                        },
                        "queries": {
                          "search_term": "@json(decodeBase64(triggerBody()['ContentData']))['studentCode']"
                        },
                        "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                      }
                    }
                  },
                  "runAfter": { },
                  "expression": "@and(equals(actions('Search_User')?['status'], 'Succeeded'),\n\tnot(empty(coalesce(outputs('Search_User')['body'], ''))))",
                  "limit": {
                    "count": 60,
                    "timeout": "PT1H"
                  },
                  "type": "Until"
                }
              },
              "runAfter": {
                "Log_Subscriber_Message": [
                  "Succeeded"
                ]
              },
              "type": "Scope"
            }
          },
          "outputs": { }
        },
        "parameters": {
          "$connections": {
            "value": {
              "servicebus1": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/servicebus')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('serviceBusConnectionName'))]"
              }
            }
          }
        }
      },
      "resources": [ ],
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('serviceBusConnectionName'))]"
      ]
    },
    {
      "comments": "Generalized from resource: '/subscriptions/59917f2a-0c8e-4062-a7eb-13897b2d7cdd/resourceGroups/RG-Kingston-POC/providers/Microsoft.Logic/workflows/LA.EditCourseEnrollment.Canvas'.",
      "type": "Microsoft.Logic/workflows",
      "name": "[parameters('LA_EditCourseEnrollment_Name')]",
      "apiVersion": "2016-06-01",
      "location": "westeurope",
      "tags": {
        "displayName": "LA.EditCourseEnrollment.Canvas"
      },
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": { },
              "type": "Object"
            }
          },
          "triggers": {
            "When_a_message_is_received_in_a_topic_subscription_(auto-complete)": {
              "recurrence": {
                "frequency": "Minute",
                "interval": 1
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "api": {
                    "runtimeUrl": "https://logic-apis-westeurope.azure-apim.net/apim/servicebus"
                  },
                  "connection": {
                    "name": "@parameters('$connections')['servicebus1']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/@{encodeURIComponent('editcourseenrollment')}/subscriptions/@{encodeURIComponent('EditCourseEnrollmentSubscription')}/messages/head",
                "queries": {
                  "subscriptionType": "Main"
                }
              }
            }
          },
          "actions": {
            "Filter_Result": {
              "runAfter": {
                "Scope": [
                  "Failed"
                ]
              },
              "type": "Query",
              "inputs": {
                "from": "@result('Scope')",
                "where": "@equals(item()['status'], 'Failed')"
              }
            },
            "For_each": {
              "foreach": "@body('Filter_Result')",
              "actions": {
                "Log_Failures": {
                  "runAfter": { },
                  "type": "ApiManagement",
                  "inputs": {
                    "api": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_logging'))]"
                    },
                    "method": "post",
                    "body": "@item()?['outputs']?['body']",
                    "headers": {
                      "correlationId": "@item()['clientTrackingId']",
                      "failedActionName": "@item()['name']",
                      "loggingStatus": "@item()['status']",
                      "sis_course_id": "@{json(decodeBase64(triggerBody()['ContentData']))['User']['StudentCourseEnrolments']['StudentCourseEnrolment']['CourseCode']}",
                      "sis_student_id": "@{json(decodeBase64(triggerBody()['ContentData']))['User']['StudentCourseEnrolments']['StudentCourseEnrolment']['StudentCode']}",
                      "sis_term_id": ""
                    },
                    "pathTemplate": {
                      "parameters": {
                        "status": "@item()['status']"
                      },
                      "template": "/api/logging/logsubscribermessage/{status}"
                    },
                    "subscriptionKey": "[parameters('apim_service_logging_subscriptionkey')]"
                  }
                }
              },
              "runAfter": {
                "Filter_Result": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "Log_Subscriber_Message": {
              "runAfter": { },
              "type": "ApiManagement",
              "inputs": {
                "api": {
                  "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_logging'))]"
                },
                "method": "post",
                "body": "@{decodeBase64(triggerBody()['ContentData'])}",
                "headers": {
                  "correlationId": "@triggerOutputs()['headers']?['X-Ms-Client-Tracking-Id']",
                  "failedActionName": "",
                  "loggingStatus": "Success",
                  "sis_course_id": "@{json(decodeBase64(triggerBody()['ContentData']))['User']['StudentCourseEnrolments']['StudentCourseEnrolment']['CourseCode']}",
                  "sis_student_id": "@{json(decodeBase64(triggerBody()['ContentData']))['User']['StudentCourseEnrolments']['StudentCourseEnrolment']['StudentCode']}",
                  "sis_term_id": ""
                },
                "pathTemplate": {
                  "parameters": {
                    "status": "@{encodeURIComponent('Success')}"
                  },
                  "template": "/api/logging/logsubscribermessage/{status}"
                },
                "subscriptionKey": "[parameters('apim_service_logging_subscriptionkey')]"
              }
            },
            "Scope": {
              "actions": {
                "Condition": {
                  "actions": {
                    "For_Each_Student_Module": {
                      "foreach": "@json(decodeBase64(triggerBody()['ContentData']))['User']['StudentCourseEnrolments']['StudentCourseEnrolment']['StudentEnrolmentModuleDetails']['StudentEnrolmentModuleDetail']",
                      "actions": {
                        "LA.EditCourseEnrollment.Helper": {
                          "runAfter": { },
                          "type": "Workflow",
                          "inputs": {
                            "body": "@{item()}",
                            "headers": {
                              "Content-Type": "application/json",
                              "enrollmentaction": "deactivate",
                              "sis_user_id": "@{json(decodeBase64(triggerBody()['ContentData']))['User']['StudentCourseEnrolments']['StudentCourseEnrolment']['Users']['User']['InstitutionEmailAddress']}"
                            },
                            "host": {
                              "triggerName": "manual",
                              "workflow": {
                                "id": "[resourceId('Microsoft.Logic/workflows', parameters('LA_EditCourseEnrollmentHelper_Name'))]"
                              }
                            }
                          }
                        }
                      },
                      "runAfter": { },
                      "type": "Foreach"
                    }
                  },
                  "runAfter": { },
                  "else": {
                    "actions": {
                      "For_Each_Student_Module_2": {
                        "foreach": "@json(decodeBase64(triggerBody()['ContentData']))['User']['StudentCourseEnrolments']['StudentCourseEnrolment']['StudentEnrolmentModuleDetails']['StudentEnrolmentModuleDetail']",
                        "actions": {
                          "LA.EditCourseEnrollment.Helper_2": {
                            "runAfter": { },
                            "type": "Workflow",
                            "inputs": {
                              "body": "@{item()}",
                              "headers": {
                                "Content-Type": "application/json",
                                "enrollmentaction": "reactivate",
                                "sis_user_id": "@{json(decodeBase64(triggerBody()['ContentData']))['User']['StudentCourseEnrolments']['StudentCourseEnrolment']['Users']['User']['InstitutionEmailAddress']}"
                              },
                              "host": {
                                "triggerName": "manual",
                                "workflow": {
                                  "id": "[resourceId('Microsoft.Logic/workflows', parameters('LA_EditCourseEnrollmentHelper_Name'))]"
                                }
                              }
                            }
                          }
                        },
                        "runAfter": { },
                        "type": "Foreach"
                      }
                    }
                  },
                  "expression": "@or(equals(json(decodeBase64(triggerBody()['ContentData']))['User']['StudentCourseEnrolments']['StudentCourseEnrolment']['CourseStatus'], 'W'),equals(json(decodeBase64(triggerBody()['ContentData']))['User']['StudentCourseEnrolments']['StudentCourseEnrolment']['CourseStatus'], 'T'),equals(json(decodeBase64(triggerBody()['ContentData']))['User']['StudentCourseEnrolments']['StudentCourseEnrolment']['CourseStatus'], 'X'),equals(json(decodeBase64(triggerBody()['ContentData']))['User']['StudentCourseEnrolments']['StudentCourseEnrolment']['CourseStatus'], 'DO'),equals(json(decodeBase64(triggerBody()['ContentData']))['User']['StudentCourseEnrolments']['StudentCourseEnrolment']['CourseStatus'], 'XD'),equals(json(decodeBase64(triggerBody()['ContentData']))['User']['StudentCourseEnrolments']['StudentCourseEnrolment']['CourseStatus'], 'DOS'))",
                  "type": "If"
                }
              },
              "runAfter": {
                "Log_Subscriber_Message": [
                  "Succeeded"
                ]
              },
              "type": "Scope"
            }
          },
          "outputs": { }
        },
        "parameters": {
          "$connections": {
            "value": {
              "servicebus1": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/servicebus')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('serviceBusConnectionName'))]"
              }
            }
          }
        }
      },
      "resources": [ ],
      "dependsOn": [
        "[resourceId('Microsoft.Logic/workflows', parameters('LA_EditCourseEnrollmentHelper_Name'))]",
        "[resourceId('Microsoft.Web/connections', variables('serviceBusConnectionName'))]"
      ]
    },
    {
      "comments": "Generalized from resource: '/subscriptions/59917f2a-0c8e-4062-a7eb-13897b2d7cdd/resourceGroups/RG-Kingston-POC/providers/Microsoft.Logic/workflows/LA.EditCourseEnrollment.Helper'.",
      "type": "Microsoft.Logic/workflows",
      "name": "[parameters('LA_EditCourseEnrollmentHelper_Name')]",
      "apiVersion": "2016-06-01",
      "location": "westeurope",
      "tags": {
        "displayName": "LA.EditCourseEnrollmentHelper.Canvas"
      },
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": { },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": { }
              }
            }
          },
          "actions": {
            "Compose": {
              "runAfter": {
                "Response": [
                  "Succeeded"
                ]
              },
              "type": "Compose",
              "inputs": {
                "headers": {
                  "Content-Type": "application/json"
                },
                "sis_course_id": "@{concat(triggerBody()['ModuleCode'],'_',triggerBody()['Occurrence'],'_',triggerBody()['PeriodSlotCode'],'_',substring(triggerBody()['AcademicYearCode'],2,2))}",
                "sis_course_id_all": "@{concat(triggerBody()['ModuleCode'],'_','ALL','_',triggerBody()['PeriodSlotCode'],'_',substring(triggerBody()['AcademicYearCode'],2,2))}"
              }
            },
            "Filter_Enrollments": {
              "runAfter": {
                "Get_All_Enrollments": [
                  "Succeeded"
                ]
              },
              "type": "Query",
              "inputs": {
                "from": "@body('Get_All_Enrollments')",
                "where": "@equals(item()['sis_user_id'], triggerOutputs()['headers']['sis_user_id'])"
              }
            },
            "Filter_array": {
              "runAfter": {
                "Until_Search_Course": [
                  "Succeeded"
                ]
              },
              "type": "Query",
              "inputs": {
                "from": "@body('Search_Course')",
                "where": "@or(equals(item()['sis_course_id'], outputs('Compose')['sis_course_id']), equals(item()['sis_course_id'], outputs('Compose')['sis_course_id_all']))"
              }
            },
            "Get_All_Enrollments": {
              "runAfter": {
                "Filter_array": [
                  "Succeeded"
                ]
              },
              "type": "ApiManagement",
              "inputs": {
                "api": {
                  "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                },
                "method": "get",
                "pathTemplate": {
                  "parameters": {
                    "course_id": "@body('Filter_array')[0]['id']"
                  },
                  "template": "/VLE/Canvas/api/v1/courses/{course_id}/enrollments"
                },
                "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
              }
            },
            "Is_Deactivate": {
              "actions": {
                "Deactivate_Course_Enrollment": {
                  "runAfter": { },
                  "type": "ApiManagement",
                  "inputs": {
                    "api": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                    },
                    "method": "delete",
                    "pathTemplate": {
                      "parameters": {
                        "course_id": "@body('Filter_array')[0]['id']",
                        "enrollment_id": "@body('Filter_Enrollments')[0]['id']"
                      },
                      "template": "/VLE/Canvas/api/v1/courses/{course_id}/enrollments/{enrollment_id}"
                    },
                    "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                  }
                }
              },
              "runAfter": {
                "Filter_Enrollments": [
                  "Succeeded"
                ]
              },
              "else": {
                "actions": {
                  "ReActivate_an_Enrollment": {
                    "runAfter": { },
                    "type": "ApiManagement",
                    "inputs": {
                      "api": {
                        "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                      },
                      "method": "put",
                      "pathTemplate": {
                        "parameters": {
                          "course_id": "@body('Filter_array')[0]['id']",
                          "enrollment_id": "@body('Filter_Enrollments')[0]['id']"
                        },
                        "template": "/VLE/Canvas/api/v1/courses/{course_id}/enrollments/{enrollment_id}/reactivate"
                      },
                      "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                    }
                  }
                }
              },
              "expression": "@equals(triggerOutputs()['headers']['enrollmentaction'], 'deactivate')",
              "type": "If"
            },
            "Response": {
              "runAfter": { },
              "type": "Response",
              "inputs": {
                "statusCode": 200
              }
            },
            "Until_Search_Course": {
              "actions": {
                "Search_Course": {
                  "runAfter": { },
                  "type": "ApiManagement",
                  "inputs": {
                    "api": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                    },
                    "method": "get",
                    "pathTemplate": {
                      "parameters": { },
                      "template": "/VLE/Canvas/api/v1/accounts/1/courses"
                    },
                    "queries": {
                      "search_term": "@triggerBody()['ModuleCode']"
                    },
                    "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                  }
                }
              },
              "runAfter": {
                "Compose": [
                  "Succeeded"
                ]
              },
              "expression": "@and(equals(actions('Search_Course')?['status'], 'Succeeded'),\n\tnot(empty(coalesce(outputs('Search_Course')['body'], ''))))",
              "limit": {
                "count": 60,
                "timeout": "PT1H"
              },
              "type": "Until"
            }
          },
          "outputs": { }
        },
        "parameters": { }
      },
      "resources": [ ],
      "dependsOn": [ ]
    },
    {
      "comments": "Generalized from resource: '/subscriptions/59917f2a-0c8e-4062-a7eb-13897b2d7cdd/resourceGroups/RG-Kingston-POC/providers/Microsoft.Logic/workflows/LA.EnrolUserCourse.Canvas'.",
      "type": "Microsoft.Logic/workflows",
      "name": "[parameters('LA_EnrollUserCourse_Name')]",
      "apiVersion": "2016-06-01",
      "location": "westeurope",
      "tags": {
        "displayName": "LA.EnrollUserCourse.Canvas"
      },
      "properties": {
        "state": "Enabled",
        "integrationAccount": {
          "id": "[concat(subscription().id, '/resourceGroups/', parameters('integrationAccountRGName'), '/providers/Microsoft.Logic/integrationAccounts/', parameters('integrationAccountName'))]"
        },
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": { },
              "type": "Object"
            }
          },
          "triggers": {
            "When_a_message_is_received_in_a_topic_subscription_(auto-complete)": {
              "recurrence": {
                "frequency": "Minute",
                "interval": 1
              },
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "api": {
                    "runtimeUrl": "https://logic-apis-westeurope.azure-apim.net/apim/servicebus"
                  },
                  "connection": {
                    "name": "@parameters('$connections')['servicebus1']['connectionId']"
                  }
                },
                "method": "get",
                "path": "/@{encodeURIComponent('EnrolUserCourse')}/subscriptions/@{encodeURIComponent('EnrolUserCourseSubscription')}/messages/head",
                "queries": {
                  "subscriptionType": "Main"
                }
              }
            }
          },
          "actions": {
            "Filter_Result": {
              "runAfter": {
                "Scope": [
                  "Failed"
                ]
              },
              "type": "Query",
              "inputs": {
                "from": "@result('Scope')",
                "where": "@equals(item()['status'], 'Failed')"
              }
            },
            "For_each": {
              "foreach": "@body('Filter_Result')",
              "actions": {
                "Log_Failures": {
                  "runAfter": { },
                  "type": "ApiManagement",
                  "inputs": {
                    "api": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_logging'))]"
                    },
                    "method": "post",
                    "body": "@item()?['outputs']?['body']",
                    "headers": {
                      "correlationId": "@item()['clientTrackingId']",
                      "failedActionName": "@item()['name']",
                      "loggingStatus": "@item()['status']",
                      "sis_course_id": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['SIS_Course_Id']}",
                      "sis_student_id": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['PersonnelCode']}",
                      "sis_term_id": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['SIS_Term_Id']}"
                    },
                    "pathTemplate": {
                      "parameters": {
                        "status": "@item()['status']"
                      },
                      "template": "/api/logging/logsubscribermessage/{status}"
                    },
                    "subscriptionKey": "[parameters('apim_service_logging_subscriptionkey')]"
                  }
                }
              },
              "runAfter": {
                "Filter_Result": [
                  "Succeeded"
                ]
              },
              "type": "Foreach"
            },
            "Log_Subscriber_Message": {
              "runAfter": { },
              "type": "ApiManagement",
              "inputs": {
                "api": {
                  "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_logging'))]"
                },
                "method": "post",
                "body": "@{decodeBase64(triggerBody()['ContentData'])}",
                "headers": {
                  "correlationId": "@triggerOutputs()['headers']?['X-Ms-Client-Tracking-Id']",
                  "failedActionName": "",
                  "loggingStatus": "Success",
                  "sis_course_id": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['SIS_Course_Id']}",
                  "sis_student_id": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['PersonnelCode']}",
                  "sis_term_id": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['SIS_Term_Id']}"
                },
                "pathTemplate": {
                  "parameters": {
                    "status": "@{encodeURIComponent('Success')}"
                  },
                  "template": "/api/logging/logsubscribermessage/{status}"
                },
                "subscriptionKey": "[parameters('apim_service_logging_subscriptionkey')]"
              }
            },
            "Scope": {
              "actions": {
                "Compose_Enroll_Section_Message": {
                  "runAfter": {
                    "Get_Course_Sections": [
                      "Succeeded"
                    ]
                  },
                  "type": "Compose",
                  "inputs": {
                    "enrollment": {
                      "enrollment_state": "active",
                      "type": "StudentEnrollment",
                      "user_id": "@{json(string(body('Search_User')[0]['id']))}"
                    }
                  }
                },
                "Delay": {
                  "runAfter": {
                    "Format_Enroll_Section_Message": [
                      "Succeeded"
                    ]
                  },
                  "type": "Wait",
                  "inputs": {
                    "interval": {
                      "count": 1,
                      "unit": "Minute"
                    }
                  },
                  "description": "Delay this so that PUT SCE happens before this for students transferring courses"
                },
                "Enroll_User_to_Section": {
                  "runAfter": {
                    "Delay": [
                      "Succeeded"
                    ]
                  },
                  "type": "ApiManagement",
                  "inputs": {
                    "api": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                    },
                    "body": "@body('Format_Enroll_Section_Message')",
                    "headers": {
                      "Content-Type": "application/json"
                    },
                    "method": "post",
                    "pathTemplate": {
                      "parameters": {
                        "section_id": "@{json(string(body('Get_Course_Sections')[0]['id']))}"
                      },
                      "template": "/VLE/Canvas/api/v1/sections/{section_id}/enrollments"
                    },
                    "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                  }
                },
                "Format_Enroll_Section_Message": {
                  "runAfter": {
                    "Compose_Enroll_Section_Message": [
                      "Succeeded"
                    ]
                  },
                  "type": "Function",
                  "inputs": {
                    "body": "@outputs('Compose_Enroll_Section_Message')",
                    "function": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/FormatJsonPayload')]"
                    }
                  }
                },
                "Get_Course_Sections": {
                  "runAfter": {
                    "Until_Search_Course": [
                      "Succeeded"
                    ]
                  },
                  "type": "ApiManagement",
                  "inputs": {
                    "api": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                    },
                    "method": "get",
                    "pathTemplate": {
                      "parameters": {
                        "course_id": "@{json(string(body('Search_Course')[0]['id']))}"
                      },
                      "template": "/VLE/Canvas/api/v1/courses/{course_id}/sections"
                    },
                    "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                  }
                },
                "Until_Search_Course": {
                  "actions": {
                    "Search_Course": {
                      "runAfter": { },
                      "type": "ApiManagement",
                      "inputs": {
                        "api": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                        },
                        "method": "get",
                        "pathTemplate": {
                          "parameters": { },
                          "template": "/VLE/Canvas/api/v1/accounts/1/courses"
                        },
                        "queries": {
                          "search_term": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['SIS_Course_Id']}"
                        },
                        "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                      }
                    }
                  },
                  "runAfter": {
                    "Until_Search_User": [
                      "Succeeded"
                    ]
                  },
                  "expression": "@and(equals(actions('Search_Course')?['status'], 'Succeeded'),\n\tnot(empty(coalesce(outputs('Search_Course')['body'], ''))))",
                  "limit": {
                    "count": 60,
                    "timeout": "PT1H"
                  },
                  "type": "Until"
                },
                "Until_Search_User": {
                  "actions": {
                    "Search_User": {
                      "runAfter": { },
                      "type": "ApiManagement",
                      "inputs": {
                        "api": {
                          "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_canvas'))]"
                        },
                        "method": "get",
                        "pathTemplate": {
                          "parameters": { },
                          "template": "/VLE/Canvas/api/v1/accounts/1/users"
                        },
                        "queries": {
                          "search_term": "@{json(decodeBase64(triggerBody()['ContentData']))['Course']['Modules']['Module']['PersonnelCode']}"
                        },
                        "subscriptionKey": "[parameters('apim_service_canvas_subscriptionkey')]"
                      }
                    }
                  },
                  "runAfter": { },
                  "expression": "@and(equals(actions('Search_User')?['status'], 'Succeeded'),\n\tnot(empty(coalesce(outputs('Search_User')['body'], ''))))",
                  "limit": {
                    "count": 60,
                    "timeout": "PT1H"
                  },
                  "type": "Until"
                }
              },
              "runAfter": {
                "Log_Subscriber_Message": [
                  "Succeeded"
                ]
              },
              "type": "Scope"
            }
          },
          "outputs": { }
        },
        "parameters": {
          "$connections": {
            "value": {
              "servicebus1": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/servicebus')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('serviceBusConnectionName'))]"
              }
            }
          }
        }
      },
      "resources": [ ],
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('serviceBusConnectionName'))]"
      ]
    },
    {
      "comments": "Generalized from resource: '/subscriptions/59917f2a-0c8e-4062-a7eb-13897b2d7cdd/resourceGroups/RG-Kingston-POC/providers/Microsoft.Logic/workflows/LAIntegrationAccountStaff'.",
      "type": "Microsoft.Logic/workflows",
      "name": "[parameters('LA_StaffInformation_Publish_Name')]",
      "apiVersion": "2016-06-01",
      "location": "westeurope",
      "tags": {
        "displayName": "LA.StaffInformation.Publish"
      },
      "properties": {
        "state": "Enabled",
        "integrationAccount": {
          "id": "[concat(subscription().id, '/resourceGroups/', parameters('integrationAccountRGName'), '/providers/Microsoft.Logic/integrationAccounts/', parameters('integrationAccountName'))]"
        },
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": { },
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": { }
              }
            }
          },
          "actions": {
            "Config_Response": {
              "runAfter": {
                "GetConfig_Request": [
                  "Succeeded"
                ]
              },
              "type": "Function",
              "inputs": {
                "body": "@outputs('GetConfig_Request')",
                "function": {
                  "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/ReturnMessageType')]"
                }
              }
            },
            "FormatJsonPayload": {
              "runAfter": {
                "Transform_To_Canonical": [
                  "Succeeded"
                ]
              },
              "type": "Function",
              "inputs": {
                "body": "@{json(body('Transform_To_Canonical'))}",
                "function": {
                  "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/FormatJsonPayload')]"
                },
                "headers": {
                  "Content-Type": "application/json"
                }
              }
            },
            "GetConfig_Request": {
              "runAfter": { },
              "type": "Compose",
              "inputs": {
                "messagetype": "@triggerOutputs()['headers']['messagetype']",
                "operation": "@triggerOutputs()['headers']['operation']"
              }
            },
            "Response": {
              "runAfter": {
                "FormatJsonPayload": [
                  "Succeeded"
                ]
              },
              "type": "Response",
              "inputs": {
                "body": "@body('FormatJsonPayload')",
                "statusCode": 200
              }
            },
            "Send_message": {
              "runAfter": {
                "Response": [
                  "Succeeded"
                ]
              },
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "ContentData": "@{encodeBase64(body('FormatJsonPayload'))}",
                  "ContentType": "application/json"
                },
                "host": {
                  "api": {
                    "runtimeUrl": "https://logic-apis-westeurope.azure-apim.net/apim/servicebus"
                  },
                  "connection": {
                    "name": "@parameters('$connections')['servicebus1']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/@{encodeURIComponent(body('Config_Response')['topic'])}/messages"
              }
            },
            "Transform_To_Canonical": {
              "runAfter": {
                "Wrap_in_Root_node": [
                  "Succeeded"
                ]
              },
              "type": "Xslt",
              "inputs": {
                "content": "@{xml(outputs('Wrap_in_Root_node'))}",
                "function": {
                  "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/TransformContainer')]"
                },
                "integrationAccount": {
                  "map": {
                    "name": "@{body('Config_Response')['map']}"
                  }
                }
              }
            },
            "Wrap_in_Root_node": {
              "runAfter": {
                "Config_Response": [
                  "Succeeded"
                ]
              },
              "type": "Compose",
              "inputs": {
                "@body('Config_Response')['wrapper']": "@triggerBody()"
              }
            }
          },
          "outputs": { }
        },
        "parameters": {
          "$connections": {
            "value": {
              "servicebus1": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/servicebus')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('serviceBusConnectionName'))]"
              }
            }
          }
        }
      },
      "resources": [ ],
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('serviceBusConnectionName'))]"
      ]
    },
    {
      "comments": "Generalized from resource: '/subscriptions/59917f2a-0c8e-4062-a7eb-13897b2d7cdd/resourceGroups/RG-Kingston-POC/providers/Microsoft.Logic/workflows/LAIntegrationAccount'.",
      "type": "Microsoft.Logic/workflows",
      "name": "[parameters('LA_StudentInformation_Publish_Name')]",
      "apiVersion": "2016-06-01",
      "location": "westeurope",
      "tags": {
        "displayName": "LA.StudentInformation.Publish"
      },
      "properties": {
        "state": "Enabled",
        "integrationAccount": {
          "id": "[concat(subscription().id, '/resourceGroups/', parameters('integrationAccountRGName'), '/providers/Microsoft.Logic/integrationAccounts/', parameters('integrationAccountName'))]"
        },
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": { },
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": { }
              }
            }
          },
          "actions": {
            "Condition": {
              "actions": {
                "HTTP": {
                  "runAfter": {
                    "Transform_To_Canonical": [
                      "Succeeded"
                    ]
                  },
                  "type": "Http",
                  "inputs": {
                    "body": "@body('Transform_To_Canonical')",
                    "method": "POST",
                    "uri": "https://messagetypeparser.azurewebsites.net/api/ConvertXmlToJson?code=m2zyho9fjz1hfod27xc12x1orquek3m3l5hjfkj0gqi2akyb9n2sqp933xhdca8t3ap9icnmi"
                  }
                },
                "Response": {
                  "runAfter": {
                    "HTTP": [
                      "Succeeded"
                    ]
                  },
                  "type": "Response",
                  "inputs": {
                    "body": "@body('HTTP')",
                    "statusCode": 200
                  }
                },
                "Send_message": {
                  "runAfter": {
                    "Response": [
                      "Succeeded"
                    ]
                  },
                  "type": "ApiConnection",
                  "inputs": {
                    "body": {
                      "ContentData": "@{base64(body('HTTP'))}",
                      "ContentType": "application/json"
                    },
                    "host": {
                      "api": {
                        "runtimeUrl": "https://logic-apis-westeurope.azure-apim.net/apim/servicebus"
                      },
                      "connection": {
                        "name": "@parameters('$connections')['servicebus1']['connectionId']"
                      }
                    },
                    "method": "post",
                    "path": "/@{encodeURIComponent(body('Config_Response')['topic'])}/messages"
                  }
                },
                "Transform_To_Canonical": {
                  "runAfter": {
                    "Wrap_in_Root_node": [
                      "Succeeded"
                    ]
                  },
                  "type": "Xslt",
                  "inputs": {
                    "content": "@{xml(outputs('Wrap_in_Root_node'))}",
                    "function": {
                      "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/TransformContainer')]"
                    },
                    "integrationAccount": {
                      "map": {
                        "name": "@{body('Config_Response')['map']}"
                      }
                    }
                  }
                },
                "Wrap_in_Root_node": {
                  "runAfter": { },
                  "type": "Compose",
                  "inputs": {
                    "@body('Config_Response')['wrapper']": "@triggerBody()"
                  }
                }
              },
              "runAfter": {
                "Config_Response": [
                  "Succeeded"
                ]
              },
              "else": {
                "actions": {
                  "Compose": {
                    "runAfter": { },
                    "type": "Compose",
                    "inputs": {
                      "keyid": "@triggerOutputs()['headers']['keyid']",
                      "messagetype": "@triggerOutputs()['headers']['messagetype']"
                    }
                  },
                  "ConstructDeleteMsgPayload": {
                    "runAfter": {
                      "Compose": [
                        "Succeeded"
                      ]
                    },
                    "type": "Function",
                    "inputs": {
                      "body": "@outputs('Compose')",
                      "function": {
                        "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/ConstructDeleteMsgPayload')]"
                      },
                      "headers": {
                        "Content-Type": "application/json"
                      }
                    }
                  },
                  "Response_2": {
                    "runAfter": {
                      "ConstructDeleteMsgPayload": [
                        "Succeeded"
                      ]
                    },
                    "type": "Response",
                    "inputs": {
                      "body": "@body('ConstructDeleteMsgPayload')",
                      "statusCode": 200
                    }
                  },
                  "Send_message_2": {
                    "runAfter": {
                      "Response_2": [
                        "Succeeded"
                      ]
                    },
                    "type": "ApiConnection",
                    "inputs": {
                      "body": {
                        "ContentData": "@{base64(body('ConstructDeleteMsgPayload'))}",
                        "ContentType": "application/json"
                      },
                      "host": {
                        "api": {
                          "runtimeUrl": "https://logic-apis-westeurope.azure-apim.net/apim/servicebus"
                        },
                        "connection": {
                          "name": "@parameters('$connections')['servicebus1']['connectionId']"
                        }
                      },
                      "method": "post",
                      "path": "/@{encodeURIComponent(body('Config_Response')['topic'])}/messages"
                    }
                  }
                }
              },
              "expression": "@not(equals(outputs('GetConfig_Request')['operation'], 'DeleteStudentInformation'))",
              "type": "If",
              "description": "Delete will not have a payload coming in, and this will branch out to create a payload"
            },
            "Config_Response": {
              "runAfter": {
                "GetConfig_Request": [
                  "Succeeded"
                ]
              },
              "type": "Function",
              "inputs": {
                "body": "@outputs('GetConfig_Request')",
                "function": {
                  "id": "[concat(subscription().id, '/resourceGroups/', parameters('functionsRGName'), '/providers/Microsoft.Web/sites/', parameters('functionsContainerAppName'), '/functions/ReturnMessageType')]"
                }
              },
              "description": "Config response from Azure Function"
            },
            "GetConfig_Request": {
              "runAfter": { },
              "type": "Compose",
              "inputs": {
                "messagetype": "@triggerOutputs()['headers']['messagetype']",
                "operation": "@triggerOutputs()['headers']['operation']"
              },
              "description": "Construct a Json request from headers to be sent to the Function"
            },
            "LogPublisherMessage": {
              "runAfter": { },
              "type": "ApiManagement",
              "inputs": {
                "api": {
                  "id": "[concat(subscription().id, '/resourceGroups/', parameters('apimRGName'), '/providers/Microsoft.ApiManagement/service/', parameters('apimInstanceName'), '/apis/', parameters('apim_service_logging'))]"
                },
                "body": "@triggerOutputs()",
                "headers": {
                  "messagetype": "@triggerOutputs()['headers']['messagetype']",
                  "operation": "@triggerOutputs()['headers']['operation']"
                },
                "method": "post",
                "pathTemplate": {
                  "parameters": {
                    "status": "@{encodeURIComponent('Success')}"
                  },
                  "template": "/api/logging/logpublishermessage/{status}"
                },
                "subscriptionKey": "[parameters('apim_service_logging_subscriptionkey')]"
              }
            }
          },
          "outputs": { }
        },
        "parameters": {
          "$connections": {
            "value": {
              "servicebus1": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/servicebus')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('serviceBusConnectionName'))]"
              }
            }
          }
        }
      },
      "resources": [ ],
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('serviceBusConnectionName'))]"
      ]
    },
    {
      "comments": "Generalized from resource: '/subscriptions/59917f2a-0c8e-4062-a7eb-13897b2d7cdd/resourceGroups/RG-Kingston-POC/providers/Microsoft.Logic/workflows/LA.Logging.Publisher.StudentInformation'.",
      "type": "Microsoft.Logic/workflows",
      "name": "[parameters('LA_Logging_StudentPublisher_Name')]",
      "apiVersion": "2016-06-01",
      "location": "westeurope",
      "tags": {
        "displayName": "LA.Logging.StudentPublisher"
      },
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": { },
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": { }
              }
            }
          },
          "actions": {
            "Insert_row": {
              "runAfter": { },
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "CorrelationId": "@triggerOutputs()['headers']['x-ms-workflow-run-id']",
                  "LogDateTime": "@utcnow()",
                  "MessageType": "@triggerOutputs()['headers']?['messagetype']",
                  "Operation": "@triggerOutputs()['headers']?['operation']",
                  "Payload": "@{triggerBody()}",
                  "Status": "Success",
                  "WorkflowName": "@triggerOutputs()['headers']['x-ms-workflow-name']"
                },
                "host": {
                  "api": {
                    "runtimeUrl": "https://logic-apis-westeurope.azure-apim.net/apim/sql"
                  },
                  "connection": {
                    "name": "@parameters('$connections')['sql']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/datasets/default/tables/@{encodeURIComponent(encodeURIComponent('[dbo].[Log_Publisher_StudentInformation]'))}/items"
              }
            }
          },
          "outputs": { }
        },
        "parameters": {
          "$connections": {
            "value": {
              "sql": {
                //"connectionId": "[parameters('workflows_LA.Logging.Publisher.StudentInformation_connectionId')]",
                //"connectionName": "sql",
                //"id": "/subscriptions/59917f2a-0c8e-4062-a7eb-13897b2d7cdd/providers/Microsoft.Web/locations/westeurope/managedApis/sql",
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/sql')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('sqlConnectionName'))]"
                //"defaultValue": "/subscriptions/59917f2a-0c8e-4062-a7eb-13897b2d7cdd/resourceGroups/RG-Kingston-POC/providers/Microsoft.Web/connections/sql"

              }
            }
          }
        }
      },
      "resources": [ ],
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('sqlConnectionName'))]"
      ]
    },
    {
      "comments": "Generalized from resource: '/subscriptions/59917f2a-0c8e-4062-a7eb-13897b2d7cdd/resourceGroups/RG-Kingston-POC/providers/Microsoft.Logic/workflows/LA.Logging.Subscriber.Canvas'.",
      "type": "Microsoft.Logic/workflows",
      "name": "[parameters('LA_Logging_CanvasSubscriber_Name')]",
      "apiVersion": "2016-06-01",
      "location": "westeurope",
      "tags": {
        "displayName": "LA.Logging.CanvasSubscriber"
      },
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "$connections": {
              "defaultValue": { },
              "type": "Object"
            }
          },
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": { }
              }
            }
          },
          "actions": {
            "Insert_row": {
              "runAfter": { },
              "type": "ApiConnection",
              "inputs": {
                "body": {
                  "CorrelationId": "@triggerOutputs()['headers']?['x-ms-client-tracking-id']",
                  "CourseCode": "@triggerOutputs()['headers']?['sis_course_id']",
                  "FailedActionName": "@triggerOutputs()['headers']?['failedActionName']",
                  "LogDateTime": "@utcnow()",
                  "Payload": "@{string(triggerBody())}",
                  "Status": "@triggerOutputs()['headers']?['loggingStatus']",
                  "StudentCode": "@triggerOutputs()['headers']?['sis_student_id']",
                  "TermId": "@triggerOutputs()['headers']?['sis_term_id']",
                  "WorkflowName": "@triggerOutputs()['headers']?['x-ms-workflow-name']"
                },
                "host": {
                  "api": {
                    "runtimeUrl": "https://logic-apis-westeurope.azure-apim.net/apim/sql"
                  },
                  "connection": {
                    "name": "@parameters('$connections')['sql']['connectionId']"
                  }
                },
                "method": "post",
                "path": "/datasets/default/tables/@{encodeURIComponent(encodeURIComponent('[dbo].[Log_Subscriber_Canvas]'))}/items"
              }
            }
          },
          "outputs": { }
        },
        "parameters": {
          "$connections": {
            "value": {
              "sql": {
                "id": "[concat(subscription().id, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/sql')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('sqlConnectionName'))]"
              }
            }
          }
        }
      },
      "resources": [ ],
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', variables('sqlConnectionName'))]"
      ]
    }


  ],
  "outputs": { }
}